{
  "version": 3,
  "sources": ["../src/image-generation.ts", "../src/services/ImageGenerator.ts", "../node_modules/uuid/dist/esm-node/rng.js", "../node_modules/uuid/dist/esm-node/stringify.js", "../node_modules/uuid/dist/esm-node/native.js", "../node_modules/uuid/dist/esm-node/v4.js"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\r\nimport { ImageGenerator } from './services/ImageGenerator';\r\n\r\nexport const handler = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  console.log('Image generation request:', JSON.stringify(event, null, 2));\r\n\r\n  try {\r\n    // Parse request body\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n    const { prompt, style = 'photographic' } = body;\r\n\r\n    // Validate input\r\n    if (!prompt || typeof prompt !== 'string') {\r\n      return {\r\n        statusCode: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Headers': 'Content-Type',\r\n          'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n        },\r\n        body: JSON.stringify({\r\n          error: 'Invalid request. Prompt is required.',\r\n        }),\r\n      };\r\n    }\r\n\r\n    // Generate image\r\n    const imageGenerator = ImageGenerator.getInstance();\r\n    const result = await imageGenerator.generateImage(prompt, style);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      },\r\n      body: JSON.stringify({\r\n        success: true,\r\n        result,\r\n      }),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generating image:', error);\r\n\r\n    // Check if debug mode is enabled\r\n    const isDebugMode = process.env.DEBUG_ERRORS === 'true';\r\n    \r\n    let errorResponse: any = {\r\n      error: 'Failed to generate image',\r\n      message: error instanceof Error ? error.message : 'Unknown error',\r\n    };\r\n\r\n    // Add detailed error information in debug mode\r\n    if (isDebugMode) {\r\n      errorResponse.debug = {\r\n        name: (error as any).name,\r\n        code: (error as any).code,\r\n        statusCode: (error as any).$metadata?.httpStatusCode,\r\n        requestId: (error as any).$metadata?.requestId,\r\n        retryable: (error as any).$retryable,\r\n        fault: (error as any).$fault,\r\n        stack: error instanceof Error ? error.stack : undefined,\r\n        fullError: JSON.stringify(error, Object.getOwnPropertyNames(error), 2)\r\n      };\r\n      \r\n      if ((error as any).$response) {\r\n        errorResponse.debug.httpResponse = {\r\n          statusCode: (error as any).$response.statusCode,\r\n          statusMessage: (error as any).$response.statusMessage,\r\n          headers: (error as any).$response.headers\r\n        };\r\n      }\r\n    }\r\n\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      },\r\n      body: JSON.stringify(errorResponse),\r\n    };\r\n  }\r\n};", "import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime'\r\nimport { S3Client, PutObjectCommand, GetObjectCommand } from '@aws-sdk/client-s3'\r\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\r\nimport { ImageResult } from '../types'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport interface ImageStyle {\r\n  style: 'cartoon' | 'realistic' | 'artistic' | 'comic'\r\n  colorScheme: 'vibrant' | 'pastel' | 'monochrome'\r\n}\r\n\r\nexport class ImageGenerator {\r\n  private static instance: ImageGenerator | null = null\r\n  private bedrockClient: BedrockRuntimeClient | null = null\r\n  private s3Client: S3Client | null = null\r\n  private bucketName: string\r\n\r\n  private constructor() {\r\n    this.bucketName = process.env.S3_BUCKET_NAME || 'ai-mad-libs-media'\r\n    \r\n    // Check for required AWS credentials\r\n    if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\r\n      throw new Error(\r\n        'AWS credentials are required for image generation. Please configure AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.'\r\n      )\r\n    }\r\n    \r\n    console.log('ImageGenerator constructor - using AWS Bedrock for image generation')\r\n\r\n    const region = process.env.AWS_REGION || 'us-east-1'\r\n    const credentials = {\r\n      accessKeyId: process.env.AWS_ACCESS_KEY_ID,\r\n      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\r\n    }\r\n\r\n    this.bedrockClient = new BedrockRuntimeClient({ region, credentials })\r\n    this.s3Client = new S3Client({ region, credentials })\r\n  }\r\n\r\n  public static getInstance(): ImageGenerator {\r\n    if (!ImageGenerator.instance) {\r\n      ImageGenerator.instance = new ImageGenerator()\r\n    }\r\n    return ImageGenerator.instance\r\n  }\r\n\r\n  // For testing purposes only\r\n  public static resetInstance(): void {\r\n    ImageGenerator.instance = null\r\n  }\r\n\r\n  async generateImage(prompt: string, style: ImageStyle = { style: 'cartoon', colorScheme: 'vibrant' }): Promise<ImageResult> {\r\n    if (!this.bedrockClient || !this.s3Client) {\r\n      throw new Error(\r\n        'AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.'\r\n      )\r\n    }\r\n\r\n    return this.generateImageWithRetry(prompt, style, 0)\r\n  }\r\n\r\n  private async generateImageWithRetry(prompt: string, style: ImageStyle, attempt: number): Promise<ImageResult> {\r\n    const maxAttempts = 4\r\n    const backoffDelays = [0, 15000, 30000, 60000, 120000] // 0s, 15s, 30s, 1min, 2min\r\n\r\n    try {\r\n      if (attempt > 0) {\r\n        console.log(`\u23F3 Retrying image generation (attempt ${attempt + 1}/${maxAttempts}) after ${backoffDelays[attempt] / 1000}s delay`)\r\n        await this.sleep(backoffDelays[attempt])\r\n      }\r\n\r\n      console.log('\uD83C\uDFA8 Generating image with Bedrock Nova:', prompt)\r\n      const enhancedPrompt = this.enhancePrompt(prompt, style)\r\n      const imageData = await this.invokeBedrockImageModel(enhancedPrompt)\r\n      const imageUrl = await this.uploadToS3(imageData, prompt)\r\n\r\n      console.log('\u2705 Image generated successfully:', imageUrl)\r\n      return {\r\n        id: uuidv4(),\r\n        url: imageUrl,\r\n        prompt: enhancedPrompt,\r\n        width: 512,\r\n        height: 512,\r\n        createdAt: new Date()\r\n      }\r\n    } catch (error) {\r\n      console.error(`\u274C Error generating image (attempt ${attempt + 1}):`, error)\r\n      \r\n      // Check if it's a throttling error and we have retries left\r\n      if ((error as any).name === 'ThrottlingException' && attempt < maxAttempts - 1) {\r\n        console.log(`\uD83D\uDD04 Throttling detected, will retry in ${backoffDelays[attempt + 1] / 1000} seconds...`)\r\n        return this.generateImageWithRetry(prompt, style, attempt + 1)\r\n      }\r\n      \r\n      // If we've exhausted retries or it's a different error, throw\r\n      console.error('\uD83D\uDEA8 All retry attempts failed or non-throttling error')\r\n      console.error('Error details:', {\r\n        message: (error as any).message,\r\n        name: (error as any).name,\r\n        code: (error as any).code || 'Unknown'\r\n      })\r\n      \r\n      throw error\r\n    }\r\n  }\r\n\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise(resolve => setTimeout(resolve, ms))\r\n  }\r\n\r\n  async generateBatch(prompts: string[], style: ImageStyle = { style: 'cartoon', colorScheme: 'vibrant' }): Promise<ImageResult[]> {\r\n    if (!this.bedrockClient || !this.s3Client) {\r\n      throw new Error(\r\n        'AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.'\r\n      )\r\n    }\r\n\r\n    const results: ImageResult[] = []\r\n    \r\n    // Generate images sequentially with longer delays to avoid rate limits\r\n    for (let i = 0; i < prompts.length; i++) {\r\n      const prompt = prompts[i]\r\n      try {\r\n        console.log(`\uD83C\uDFA8 Generating batch image ${i + 1}/${prompts.length}`)\r\n        const result = await this.generateImage(prompt, style)\r\n        results.push(result)\r\n        \r\n        // Add longer delay between batch requests to avoid throttling\r\n        if (i < prompts.length - 1) {\r\n          console.log(`\u23F3 Waiting 5 seconds before next batch image...`)\r\n          await this.sleep(5000)\r\n        }\r\n      } catch (error) {\r\n        console.error(`Error generating batch image for prompt \"${prompt}\":`, error)\r\n        throw error\r\n      }\r\n    }\r\n\r\n    return results\r\n  }\r\n\r\n  async optimizeForVideo(image: ImageResult): Promise<ImageResult> {\r\n    // For now, return the same image\r\n    // In a full implementation, this would resize/optimize for video\r\n    return {\r\n      ...image,\r\n      width: 1024,\r\n      height: 576, // 16:9 aspect ratio for video\r\n    }\r\n  }\r\n\r\n  private async invokeBedrockImageModel(prompt: string): Promise<Uint8Array> {\r\n    if (!this.bedrockClient) {\r\n      throw new Error('Bedrock client not initialized')\r\n    }\r\n\r\n    // Use Amazon Nova Canvas model\r\n    const modelId = process.env.BEDROCK_IMAGE_MODEL_ID || 'amazon.nova-canvas-v1:0'\r\n    \r\n    const payload = {\r\n      taskType: \"TEXT_IMAGE\",\r\n      textToImageParams: {\r\n        text: prompt,\r\n        negativeText: \"blurry, low quality, distorted, text, watermark, signature\"\r\n      },\r\n      imageGenerationConfig: {\r\n        numberOfImages: 1,\r\n        height: 512,\r\n        width: 512,\r\n        cfgScale: 8.0,\r\n        seed: Math.floor(Math.random() * 1000000)\r\n      }\r\n    }\r\n\r\n    const command = new InvokeModelCommand({\r\n      modelId,\r\n      body: JSON.stringify(payload),\r\n      contentType: 'application/json',\r\n      accept: 'application/json'\r\n    })\r\n\r\n    try {\r\n      console.log('\uD83D\uDCE1 Calling Bedrock Nova API with payload:', JSON.stringify(payload, null, 2))\r\n      const response = await this.bedrockClient.send(command)\r\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body))\r\n      \r\n      console.log('\uD83D\uDCE5 Bedrock response received:', {\r\n        hasImages: !!responseBody.images,\r\n        imageCount: responseBody.images?.length || 0\r\n      })\r\n      \r\n      if (!responseBody.images || responseBody.images.length === 0) {\r\n        throw new Error('No image generated by Bedrock Nova')\r\n      }\r\n\r\n      // Decode base64 image data\r\n      const base64Image = responseBody.images[0]\r\n      return new Uint8Array(Buffer.from(base64Image, 'base64'))\r\n    } catch (error) {\r\n      console.error('\uD83D\uDEA8 Bedrock API call failed:', error)\r\n      if ((error as any).name === 'ValidationException') {\r\n        console.error('\uD83D\uDCA1 This is likely a payload format issue')\r\n      } else if ((error as any).name === 'ThrottlingException') {\r\n        console.error('\uD83D\uDEA6 Rate limit exceeded - will retry with backoff')\r\n      } else if ((error as any).name === 'ServiceQuotaExceededException') {\r\n        console.error('\uD83D\uDCCA Service quota exceeded - may need to request limit increase')\r\n      }\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async uploadToS3(imageData: Uint8Array, prompt: string): Promise<string> {\r\n    if (!this.s3Client) {\r\n      throw new Error('S3 client not initialized')\r\n    }\r\n\r\n    const key = `images/${uuidv4()}.png`\r\n    \r\n    const command = new PutObjectCommand({\r\n      Bucket: this.bucketName,\r\n      Key: key,\r\n      Body: imageData,\r\n      ContentType: 'image/png',\r\n      Metadata: {\r\n        prompt: prompt.substring(0, 1000), // Limit metadata size\r\n        generatedAt: new Date().toISOString()\r\n      }\r\n    })\r\n\r\n    await this.s3Client.send(command)\r\n\r\n    // Generate signed URL for access\r\n    const getCommand = new GetObjectCommand({\r\n      Bucket: this.bucketName,\r\n      Key: key\r\n    })\r\n\r\n    return await getSignedUrl(this.s3Client, getCommand, { expiresIn: 7 * 24 * 60 * 60 }) // 7 days\r\n  }\r\n\r\n  private enhancePrompt(prompt: string, style: ImageStyle): string {\r\n    const styleModifiers = {\r\n      cartoon: 'modern Hanna-Barbera cartoon style, 2020s animation, clean vector art, bold outlines, flat colors, contemporary cartoon design, animated series style',\r\n      realistic: 'photorealistic, detailed, high quality',\r\n      artistic: 'artistic, painterly, creative, stylized',\r\n      comic: 'comic book style, bold lines, dynamic'\r\n    }\r\n\r\n    const colorModifiers = {\r\n      vibrant: 'vibrant saturated colors, bright cheerful palette, bold color choices',\r\n      pastel: 'soft pastel colors, gentle tones, muted palette',\r\n      monochrome: 'black and white, high contrast, grayscale'\r\n    }\r\n\r\n    return `${prompt}, ${styleModifiers[style.style]}, ${colorModifiers[style.colorScheme]}, family-friendly, safe for work, no text, high quality, smooth gradients, modern cartoon illustration`\r\n  }\r\n}", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],
  "mappings": "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",
  "names": ["image_generation_exports", "__export", "handler", "__toCommonJS", "import_client_bedrock_runtime", "import_client_s3", "import_s3_request_presigner", "import_crypto", "rnds8Pool", "poolPtr", "rng", "crypto", "byteToHex", "i", "unsafeStringify", "arr", "offset", "import_crypto", "native_default", "crypto", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "i", "unsafeStringify", "v4_default", "ImageGenerator", "_ImageGenerator", "region", "credentials", "prompt", "style", "attempt", "backoffDelays", "enhancedPrompt", "imageData", "imageUrl", "v4_default", "error", "ms", "resolve", "prompts", "results", "i", "result", "image", "modelId", "payload", "command", "response", "responseBody", "base64Image", "key", "getCommand", "styleModifiers", "colorModifiers", "handler", "event", "body", "prompt", "style", "result", "ImageGenerator", "error", "isDebugMode", "errorResponse"]
}
