{
  "version": 3,
  "sources": ["../src/story-generation.ts", "../src/services/StoryGenerator.ts", "../node_modules/uuid/dist/esm-node/rng.js", "../node_modules/uuid/dist/esm-node/stringify.js", "../node_modules/uuid/dist/esm-node/native.js", "../node_modules/uuid/dist/esm-node/v4.js"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\r\nimport { StoryGenerator } from './services/StoryGenerator';\r\n\r\nexport const handler = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  console.log('Story generation request:', JSON.stringify(event, null, 2));\r\n\r\n  try {\r\n    // Parse request body\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n    const { theme, playerCount } = body;\r\n\r\n    // Validate input\r\n    if (!playerCount || playerCount < 1 || playerCount > 8) {\r\n      return {\r\n        statusCode: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Headers': 'Content-Type',\r\n          'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n        },\r\n        body: JSON.stringify({\r\n          error: 'Invalid player count. Must be between 1 and 8.',\r\n        }),\r\n      };\r\n    }\r\n\r\n    // Generate story template\r\n    const storyGenerator = StoryGenerator.getInstance();\r\n    const template = await storyGenerator.generateTemplate(theme, playerCount);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      },\r\n      body: JSON.stringify({\r\n        success: true,\r\n        template,\r\n      }),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generating story template:', error);\r\n\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      },\r\n      body: JSON.stringify({\r\n        error: 'Failed to generate story template',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      }),\r\n    };\r\n  }\r\n};", "import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime'\r\nimport { StoryTemplate, WordSubmission, Story, CompletedParagraph, WordHighlight, PlayerContribution, WordType, Paragraph, WordBlank } from '../types'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport class StoryGenerator {\r\n  private static instance: StoryGenerator | null = null\r\n  private bedrockClient: BedrockRuntimeClient | null = null\r\n  private useMock: boolean\r\n\r\n  private constructor() {\r\n    // Use mock only when AWS credentials are not available\r\n    this.useMock = !process.env.AWS_ACCESS_KEY_ID ||\r\n      !process.env.AWS_SECRET_ACCESS_KEY\r\n\r\n    console.log('StoryGenerator constructor - useMock:', this.useMock)\r\n\r\n    if (!this.useMock) {\r\n      this.bedrockClient = new BedrockRuntimeClient({\r\n        region: process.env.AWS_REGION || 'us-east-1',\r\n        credentials: {\r\n          accessKeyId: process.env.AWS_ACCESS_KEY_ID || '',\r\n          secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || '',\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  public static getInstance(): StoryGenerator {\r\n    if (!StoryGenerator.instance) {\r\n      StoryGenerator.instance = new StoryGenerator()\r\n    }\r\n    return StoryGenerator.instance\r\n  }\r\n\r\n  // For testing purposes only\r\n  public static resetInstance(): void {\r\n    StoryGenerator.instance = null\r\n  }\r\n\r\n  async generateTemplate(theme?: string, playerCount: number = 4): Promise<StoryTemplate> {\r\n    if (this.useMock) {\r\n      return this.generateMockTemplate(theme, playerCount)\r\n    }\r\n\r\n    try {\r\n      const prompt = this.createTemplatePrompt(theme, playerCount)\r\n      const response = await this.invokeBedrockModel(prompt)\r\n\r\n      return this.parseTemplateResponse(response, theme, playerCount)\r\n    } catch (error) {\r\n      console.error('Error generating story template with Bedrock, falling back to mock:', error)\r\n      // Fall back to mock generator\r\n      return this.generateMockTemplate(theme, playerCount)\r\n    }\r\n  }\r\n\r\n  async fillTemplate(template: StoryTemplate, words: WordSubmission[]): Promise<Story> {\r\n    try {\r\n      // Combine all paragraph texts into one string for processing\r\n      let fullStoryText = template.paragraphs.map(p => p.text).join(' ')\r\n      const wordHighlights: WordHighlight[] = []\r\n      \r\n      console.log('\u26A1 === LAMBDA STORY GENERATOR ===')\r\n      console.log('\u26A1 Full story text:', fullStoryText)\r\n      console.log('\u26A1 Processing', words.length, 'word submissions')\r\n\r\n      // Go through each word submission and replace the first matching placeholder\r\n      words.forEach((submission, index) => {\r\n        const placeholder = `{${this.wordTypeToPlaceholder(submission.wordType)}}`\r\n        \r\n        console.log(`\u26A1 Word ${index + 1}/${words.length}: \"${submission.word}\" for placeholder \"${placeholder}\"`)\r\n        \r\n        const placeholderIndex = fullStoryText.indexOf(placeholder)\r\n        if (placeholderIndex !== -1) {\r\n          // Track highlight position before replacement\r\n          wordHighlights.push({\r\n            word: submission.word,\r\n            playerUsername: submission.playerUsername,\r\n            wordType: submission.wordType,\r\n            startIndex: placeholderIndex,\r\n            endIndex: placeholderIndex + submission.word.length\r\n          })\r\n          \r\n          // Replace the first occurrence\r\n          fullStoryText = fullStoryText.replace(placeholder, submission.word)\r\n          console.log(`\u26A1 Replaced \"${placeholder}\" with \"${submission.word}\"`)\r\n        } else {\r\n          console.error(`\u26A1 Could not find placeholder \"${placeholder}\" in story`)\r\n        }\r\n      })\r\n\r\n      // Split the filled story back into paragraphs\r\n      const originalTexts = template.paragraphs.map(p => p.text)\r\n      const filledTexts = this.splitFilledTextIntoParagraphs(fullStoryText, originalTexts)\r\n      \r\n      const completedParagraphs: CompletedParagraph[] = template.paragraphs.map((paragraph, index) => {\r\n        return {\r\n          id: paragraph.id,\r\n          text: filledTexts[index] || paragraph.text,\r\n          imageUrl: null, // Images will be generated separately\r\n          wordHighlights: [] // We'll calculate these per paragraph if needed\r\n        }\r\n      })\r\n\r\n      // Create player contributions summary\r\n      const playerContributions = this.createPlayerContributions(words)\r\n\r\n      const story: Story = {\r\n        id: uuidv4(),\r\n        title: template.title,\r\n        theme: template.theme,\r\n        paragraphs: completedParagraphs,\r\n        playerContributions,\r\n        createdAt: new Date()\r\n      }\r\n\r\n      return story\r\n    } catch (error) {\r\n      console.error('Error filling template:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  validateTemplate(template: StoryTemplate): boolean {\r\n    if (!template || !template.paragraphs || template.paragraphs.length === 0) {\r\n      return false\r\n    }\r\n\r\n    // Check if all paragraphs have word blanks\r\n    return template.paragraphs.every(p => p.wordBlanks && p.wordBlanks.length > 0)\r\n  }\r\n\r\n  private async invokeBedrockModel(prompt: string): Promise<string> {\r\n    if (!this.bedrockClient) {\r\n      throw new Error('Bedrock client not initialized')\r\n    }\r\n\r\n    const modelId = process.env.BEDROCK_MODEL_ID || 'amazon.nova-lite-v1:0'\r\n\r\n    const payload = {\r\n      messages: [\r\n        {\r\n          role: 'user',\r\n          content: [\r\n            {\r\n              text: prompt\r\n            }\r\n          ]\r\n        }\r\n      ],\r\n      inferenceConfig: {\r\n        max_new_tokens: 2000,\r\n        temperature: 0.7,\r\n        top_p: 0.9\r\n      }\r\n    }\r\n\r\n    const command = new InvokeModelCommand({\r\n      modelId,\r\n      body: JSON.stringify(payload),\r\n      contentType: 'application/json',\r\n      accept: 'application/json'\r\n    })\r\n\r\n    const response = await this.bedrockClient.send(command)\r\n    const responseBody = JSON.parse(new TextDecoder().decode(response.body))\r\n\r\n    // Nova Lite response format\r\n    return responseBody.output.message.content[0].text\r\n  }\r\n\r\n  private createTemplatePrompt(theme?: string, playerCount: number = 4): string {\r\n    const themeText = theme ? `with a ${theme} theme` : 'with any fun theme'\r\n\r\n    return `Create a Mad Libs story template ${themeText} that will be fun when filled with random words. \r\n\r\nRequirements:\r\n- Create a story with exactly 4 paragraphs\r\n- Each paragraph must have exactly 4 sentences\r\n- Include exactly 16 word blanks total (exactly 4 per paragraph, 1 per sentence)\r\n- Use these word types: noun, verb, adjective, adverb, plural_noun, past_tense_verb, color, number, place, person\r\n- Make the story family-friendly but funny\r\n- Each sentence should have exactly ONE word blank\r\n- Use placeholders like {noun}, {adjective}, etc.\r\n- Structure: 4 paragraphs \u00D7 4 sentences \u00D7 1 word = 16 words total\r\n- Include an image description for each paragraph\r\n\r\nFormat your response as JSON:\r\n{\r\n  \"title\": \"Story Title\",\r\n  \"theme\": \"${theme || 'adventure'}\",\r\n  \"paragraphs\": [\r\n    {\r\n      \"text\": \"Story text with {word_type} placeholders\",\r\n      \"imagePrompt\": \"Description for AI image generation\"\r\n    }\r\n  ]\r\n}\r\n\r\nMake it creative and funny!`\r\n  }\r\n\r\n  private parseTemplateResponse(response: string, theme?: string, playerCount: number = 4): StoryTemplate {\r\n    try {\r\n      // Clean up the response - remove markdown code blocks if present\r\n      let cleanResponse = response.trim()\r\n\r\n      // Remove ```json and ``` markers if present\r\n      if (cleanResponse.startsWith('```json')) {\r\n        cleanResponse = cleanResponse.replace(/^```json\\s*/, '').replace(/\\s*```$/, '')\r\n      } else if (cleanResponse.startsWith('```')) {\r\n        cleanResponse = cleanResponse.replace(/^```\\s*/, '').replace(/\\s*```$/, '')\r\n      }\r\n\r\n      const parsed = JSON.parse(cleanResponse)\r\n\r\n      const paragraphs: Paragraph[] = parsed.paragraphs.map((p: any, pIndex: number) => {\r\n        const wordBlanks: WordBlank[] = []\r\n        let position = 0\r\n\r\n        // Extract word blanks from text\r\n        const regex = /\\{(\\w+)\\}/g\r\n        let match\r\n        while ((match = regex.exec(p.text)) !== null) {\r\n          const wordType = this.normalizeWordType(match[1])\r\n          if (wordType) {\r\n            wordBlanks.push({\r\n              id: uuidv4(),\r\n              type: wordType,\r\n              position: position++,\r\n              assignedPlayerId: null\r\n            })\r\n          }\r\n        }\r\n\r\n        return {\r\n          id: uuidv4(),\r\n          text: p.text,\r\n          wordBlanks,\r\n          imagePrompt: p.imagePrompt || `Scene from paragraph ${pIndex + 1}`\r\n        }\r\n      })\r\n\r\n      const totalWordBlanks = paragraphs.reduce((sum, p) => sum + p.wordBlanks.length, 0)\r\n\r\n      // If AI generated wrong number of words, fall back to mock\r\n      if (totalWordBlanks !== 16) {\r\n        console.log(`AI generated ${totalWordBlanks} words (expected 16), falling back to mock template`)\r\n        return this.generateMockTemplate(theme, playerCount)\r\n      }\r\n\r\n      return {\r\n        id: uuidv4(),\r\n        title: parsed.title || 'AI Generated Story',\r\n        paragraphs,\r\n        totalWordBlanks,\r\n        theme: theme || parsed.theme || 'adventure',\r\n        difficulty: 'medium'\r\n      }\r\n    } catch (error) {\r\n      console.error('Error parsing template response:', error)\r\n      throw new Error('Failed to parse AI response')\r\n    }\r\n  }\r\n\r\n  private normalizeWordType(type: string): WordType | null {\r\n    const normalized = type.toLowerCase().replace(/[_\\s]/g, '_')\r\n\r\n    const typeMap: Record<string, WordType> = {\r\n      'noun': WordType.NOUN,\r\n      'verb': WordType.VERB,\r\n      'adjective': WordType.ADJECTIVE,\r\n      'adverb': WordType.ADVERB,\r\n      'plural_noun': WordType.PLURAL_NOUN,\r\n      'past_tense_verb': WordType.PAST_TENSE_VERB,\r\n      'color': WordType.COLOR,\r\n      'number': WordType.NUMBER,\r\n      'place': WordType.PLACE,\r\n      'person': WordType.PERSON\r\n    }\r\n\r\n    return typeMap[normalized] || null\r\n  }\r\n\r\n  private generateMockTemplate(theme?: string, playerCount: number = 4): StoryTemplate {\r\n    // Return a simple mock template\r\n    const paragraphs: Paragraph[] = [\r\n      {\r\n        id: uuidv4(),\r\n        text: \"Once upon a time, there was a {adjective} {noun} who loved to {verb} {adverb}.\",\r\n        wordBlanks: [\r\n          { id: uuidv4(), type: WordType.ADJECTIVE, position: 0, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.NOUN, position: 1, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.VERB, position: 2, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.ADVERB, position: 3, assignedPlayerId: null }\r\n        ],\r\n        imagePrompt: \"A whimsical character in a fairy tale setting\"\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        text: \"Every day, they would visit the {color} {place} with {number} {plural_noun}.\",\r\n        wordBlanks: [\r\n          { id: uuidv4(), type: WordType.COLOR, position: 0, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.PLACE, position: 1, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.NUMBER, position: 2, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.PLURAL_NOUN, position: 3, assignedPlayerId: null }\r\n        ],\r\n        imagePrompt: \"A colorful location with various objects\"\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        text: \"One day, {person} {past_tense_verb} and everything changed forever!\",\r\n        wordBlanks: [\r\n          { id: uuidv4(), type: WordType.PERSON, position: 0, assignedPlayerId: null },\r\n          { id: uuidv4(), type: WordType.PAST_TENSE_VERB, position: 1, assignedPlayerId: null }\r\n        ],\r\n        imagePrompt: \"A dramatic moment with a person taking action\"\r\n      }\r\n    ]\r\n\r\n    const allWordBlanks = paragraphs.flatMap(p => p.wordBlanks)\r\n\r\n    return {\r\n      id: uuidv4(),\r\n      title: \"A Magical Adventure\",\r\n      paragraphs,\r\n      totalWordBlanks: allWordBlanks.length,\r\n      theme: theme || \"adventure\",\r\n      difficulty: 'easy'\r\n    }\r\n  }\r\n\r\n  private wordTypeToPlaceholder(wordType: WordType): string {\r\n    switch (wordType) {\r\n      case WordType.NOUN: return 'noun'\r\n      case WordType.VERB: return 'verb'\r\n      case WordType.ADJECTIVE: return 'adjective'\r\n      case WordType.ADVERB: return 'adverb'\r\n      case WordType.PLURAL_NOUN: return 'plural_noun'\r\n      case WordType.PAST_TENSE_VERB: return 'past_tense_verb'\r\n      case WordType.COLOR: return 'color'\r\n      case WordType.NUMBER: return 'number'\r\n      case WordType.PLACE: return 'place'\r\n      case WordType.PERSON: return 'person'\r\n      default: return String(wordType).toLowerCase()\r\n    }\r\n  }\r\n\r\n  private splitFilledTextIntoParagraphs(filledText: string, originalTexts: string[]): string[] {\r\n    // This is a simple approach - we'll try to match the structure\r\n    // by finding where each original paragraph would start in the filled text\r\n    const result: string[] = []\r\n    let remainingText = filledText\r\n    \r\n    for (let i = 0; i < originalTexts.length; i++) {\r\n      const originalText = originalTexts[i]\r\n      \r\n      // Count words in original paragraph (rough estimate)\r\n      const originalWordCount = originalText.split(/\\s+/).length\r\n      \r\n      // Take approximately the same number of words from filled text\r\n      const words = remainingText.split(/\\s+/)\r\n      const paragraphWords = words.slice(0, originalWordCount)\r\n      const paragraphText = paragraphWords.join(' ')\r\n      \r\n      result.push(paragraphText)\r\n      \r\n      // Remove used words from remaining text\r\n      remainingText = words.slice(originalWordCount).join(' ')\r\n    }\r\n    \r\n    return result\r\n  }\r\n\r\n  private createPlayerContributions(words: WordSubmission[]): PlayerContribution[] {\r\n    const contributionMap = new Map<string, PlayerContribution>()\r\n\r\n    words.forEach(word => {\r\n      if (!contributionMap.has(word.playerId)) {\r\n        contributionMap.set(word.playerId, {\r\n          playerId: word.playerId,\r\n          playerUsername: word.playerUsername,\r\n          wordsContributed: []\r\n        })\r\n      }\r\n\r\n      contributionMap.get(word.playerId)!.wordsContributed.push(word.word)\r\n    })\r\n\r\n    return Array.from(contributionMap.values())\r\n  }\r\n}", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],
  "mappings": "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",
  "names": ["story_generation_exports", "__export", "handler", "__toCommonJS", "import_client_bedrock_runtime", "import_crypto", "rnds8Pool", "poolPtr", "rng", "crypto", "byteToHex", "i", "unsafeStringify", "arr", "offset", "import_crypto", "native_default", "crypto", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "i", "unsafeStringify", "v4_default", "StoryGenerator", "_StoryGenerator", "theme", "playerCount", "prompt", "response", "error", "template", "words", "fullStoryText", "p", "wordHighlights", "submission", "index", "placeholder", "placeholderIndex", "originalTexts", "filledTexts", "completedParagraphs", "paragraph", "playerContributions", "v4_default", "modelId", "payload", "command", "cleanResponse", "parsed", "paragraphs", "pIndex", "wordBlanks", "position", "regex", "match", "wordType", "totalWordBlanks", "sum", "type", "normalized", "allWordBlanks", "filledText", "result", "remainingText", "i", "originalWordCount", "paragraphText", "contributionMap", "word", "handler", "event", "body", "theme", "playerCount", "template", "StoryGenerator", "error"]
}
