{
  "version": 3,
  "sources": ["../src/test-aws.ts"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\r\n\r\nexport const handler = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  console.log('Test AWS request:', JSON.stringify(event, null, 2));\r\n\r\n  try {\r\n    // Basic AWS connectivity test\r\n    const testResults = {\r\n      timestamp: new Date().toISOString(),\r\n      region: process.env.AWS_REGION || 'unknown',\r\n      functionName: process.env.AWS_LAMBDA_FUNCTION_NAME || 'unknown',\r\n      environment: process.env.NODE_ENV || 'unknown',\r\n      tableName: process.env.TABLE_NAME || 'not-configured',\r\n      imagesBucket: process.env.IMAGES_BUCKET_NAME || 'not-configured',\r\n    };\r\n\r\n    // Test environment variables\r\n    const envCheck = {\r\n      hasTableName: !!process.env.TABLE_NAME,\r\n      hasImagesBucket: !!process.env.IMAGES_BUCKET_NAME,\r\n      hasAwsRegion: !!process.env.AWS_REGION,\r\n    };\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n      },\r\n      body: JSON.stringify({\r\n        success: true,\r\n        message: 'AWS Lambda function is working correctly',\r\n        testResults,\r\n        environmentCheck: envCheck,\r\n        requestInfo: {\r\n          method: event.httpMethod,\r\n          path: event.path,\r\n          queryParams: event.queryStringParameters,\r\n          headers: event.headers,\r\n        },\r\n      }),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in test AWS function:', error);\r\n\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\r\n      },\r\n      body: JSON.stringify({\r\n        error: 'Test AWS function failed',\r\n        message: error instanceof Error ? error.message : 'Unknown error',\r\n      }),\r\n    };\r\n  }\r\n};"],
  "mappings": ";yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAEO,IAAME,EAAU,MACrBE,GACmC,CACnC,QAAQ,IAAI,oBAAqB,KAAK,UAAUA,EAAO,KAAM,CAAC,CAAC,EAE/D,GAAI,CAEF,IAAMC,EAAc,CAClB,UAAW,IAAI,KAAK,EAAE,YAAY,EAClC,OAAQ,QAAQ,IAAI,YAAc,UAClC,aAAc,QAAQ,IAAI,0BAA4B,UACtD,YAAa,aACb,UAAW,QAAQ,IAAI,YAAc,iBACrC,aAAc,QAAQ,IAAI,oBAAsB,gBAClD,EAGMC,EAAW,CACf,aAAc,CAAC,CAAC,QAAQ,IAAI,WAC5B,gBAAiB,CAAC,CAAC,QAAQ,IAAI,mBAC/B,aAAc,CAAC,CAAC,QAAQ,IAAI,UAC9B,EAEA,MAAO,CACL,WAAY,IACZ,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,eAChC,+BAAgC,cAClC,EACA,KAAM,KAAK,UAAU,CACnB,QAAS,GACT,QAAS,2CACT,YAAAD,EACA,iBAAkBC,EAClB,YAAa,CACX,OAAQF,EAAM,WACd,KAAMA,EAAM,KACZ,YAAaA,EAAM,sBACnB,QAASA,EAAM,OACjB,CACF,CAAC,CACH,CACF,OAASG,EAAO,CACd,eAAQ,MAAM,8BAA+BA,CAAK,EAE3C,CACL,WAAY,IACZ,QAAS,CACP,eAAgB,mBAChB,8BAA+B,IAC/B,+BAAgC,eAChC,+BAAgC,cAClC,EACA,KAAM,KAAK,UAAU,CACnB,MAAO,2BACP,QAASA,aAAiB,MAAQA,EAAM,QAAU,eACpD,CAAC,CACH,CACF,CACF",
  "names": ["test_aws_exports", "__export", "handler", "__toCommonJS", "event", "testResults", "envCheck", "error"]
}
