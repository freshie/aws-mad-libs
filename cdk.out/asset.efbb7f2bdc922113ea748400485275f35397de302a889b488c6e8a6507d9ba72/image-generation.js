// Lambda function built with esbuild
"use strict";var E=Object.create;var c=Object.defineProperty;var x=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var P=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var O=(t,e)=>{for(var r in e)c(t,r,{get:e[r],enumerable:!0})},w=(t,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of k(e))!T.call(t,n)&&n!==r&&c(t,n,{get:()=>e[n],enumerable:!(o=x(e,n))||o.enumerable});return t};var C=(t,e,r)=>(r=t!=null?E(P(t)):{},w(e||!t||!t.__esModule?c(r,"default",{value:t,enumerable:!0}):r,t)),R=t=>w(c({},"__esModule",{value:!0}),t);var _={};O(_,{handler:()=>B});module.exports=R(_);var y=require("@aws-sdk/client-bedrock-runtime"),l=require("@aws-sdk/client-s3"),v=require("@aws-sdk/s3-request-presigner");var I=C(require("crypto")),m=new Uint8Array(256),d=m.length;function h(){return d>m.length-16&&(I.default.randomFillSync(m),d=0),m.slice(d,d+=16)}var i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));function A(t,e=0){return i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]}var b=C(require("crypto")),f={randomUUID:b.default.randomUUID};function N(t,e,r){if(f.randomUUID&&!e&&!t)return f.randomUUID();t=t||{};let o=t.random||(t.rng||h)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,e){r=r||0;for(let n=0;n<16;++n)e[r+n]=o[n];return e}return A(o)}var g=N;var u=class t{constructor(){this.bedrockClient=null;this.s3Client=null;if(this.bucketName=process.env.S3_BUCKET_NAME||"ai-mad-libs-media",!process.env.AWS_ACCESS_KEY_ID||!process.env.AWS_SECRET_ACCESS_KEY)throw new Error("AWS credentials are required for image generation. Please configure AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.");console.log("ImageGenerator constructor - using AWS Bedrock for image generation");let e=process.env.AWS_REGION||"us-east-1",r={accessKeyId:process.env.AWS_ACCESS_KEY_ID,secretAccessKey:process.env.AWS_SECRET_ACCESS_KEY};this.bedrockClient=new y.BedrockRuntimeClient({region:e,credentials:r}),this.s3Client=new l.S3Client({region:e,credentials:r})}static{this.instance=null}static getInstance(){return t.instance||(t.instance=new t),t.instance}static resetInstance(){t.instance=null}async generateImage(e,r={style:"cartoon",colorScheme:"vibrant"}){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");return this.generateImageWithRetry(e,r,0)}async generateImageWithRetry(e,r,o){let s=[0,15e3,3e4,6e4,12e4];try{o>0&&(console.log(`\u23F3 Retrying image generation (attempt ${o+1}/4) after ${s[o]/1e3}s delay`),await this.sleep(s[o])),console.log("\u{1F3A8} Generating image with Bedrock Nova:",e);let a=this.enhancePrompt(e,r),p=await this.invokeBedrockImageModel(a),S=await this.uploadToS3(p,e);return console.log("\u2705 Image generated successfully:",S),{id:g(),url:S,prompt:a,width:512,height:512,createdAt:new Date}}catch(a){if(console.error(`\u274C Error generating image (attempt ${o+1}):`,a),a.name==="ThrottlingException"&&o<3)return console.log(`\u{1F504} Throttling detected, will retry in ${s[o+1]/1e3} seconds...`),this.generateImageWithRetry(e,r,o+1);throw console.error("\u{1F6A8} All retry attempts failed or non-throttling error"),console.error("Error details:",{message:a.message,name:a.name,code:a.code||"Unknown"}),a}}sleep(e){return new Promise(r=>setTimeout(r,e))}async generateBatch(e,r={style:"cartoon",colorScheme:"vibrant"}){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");let o=[];for(let n=0;n<e.length;n++){let s=e[n];try{console.log(`\u{1F3A8} Generating batch image ${n+1}/${e.length}`);let a=await this.generateImage(s,r);o.push(a),n<e.length-1&&(console.log("\u23F3 Waiting 5 seconds before next batch image..."),await this.sleep(5e3))}catch(a){throw console.error(`Error generating batch image for prompt "${s}":`,a),a}}return o}async optimizeForVideo(e){return{...e,width:1024,height:576}}async invokeBedrockImageModel(e){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let r=process.env.BEDROCK_IMAGE_MODEL_ID||"amazon.nova-canvas-v1:0",o={taskType:"TEXT_IMAGE",textToImageParams:{text:e,negativeText:"blurry, low quality, distorted, text, watermark, signature"},imageGenerationConfig:{numberOfImages:1,height:512,width:512,cfgScale:8,seed:Math.floor(Math.random()*1e6)}},n=new y.InvokeModelCommand({modelId:r,body:JSON.stringify(o),contentType:"application/json",accept:"application/json"});try{console.log("\u{1F4E1} Calling Bedrock Nova API with payload:",JSON.stringify(o,null,2));let s=await this.bedrockClient.send(n),a=JSON.parse(new TextDecoder().decode(s.body));if(console.log("\u{1F4E5} Bedrock response received:",{hasImages:!!a.images,imageCount:a.images?.length||0}),!a.images||a.images.length===0)throw new Error("No image generated by Bedrock Nova");let p=a.images[0];return new Uint8Array(Buffer.from(p,"base64"))}catch(s){throw console.error("\u{1F6A8} Bedrock API call failed:",s),s.name==="ValidationException"?console.error("\u{1F4A1} This is likely a payload format issue"):s.name==="ThrottlingException"?console.error("\u{1F6A6} Rate limit exceeded - will retry with backoff"):s.name==="ServiceQuotaExceededException"&&console.error("\u{1F4CA} Service quota exceeded - may need to request limit increase"),s}}async uploadToS3(e,r){if(!this.s3Client)throw new Error("S3 client not initialized");let o=`images/${g()}.png`,n=new l.PutObjectCommand({Bucket:this.bucketName,Key:o,Body:e,ContentType:"image/png",Metadata:{prompt:r.substring(0,1e3),generatedAt:new Date().toISOString()}});await this.s3Client.send(n);let s=new l.GetObjectCommand({Bucket:this.bucketName,Key:o});return await(0,v.getSignedUrl)(this.s3Client,s,{expiresIn:7*24*60*60})}enhancePrompt(e,r){let o={cartoon:"modern Hanna-Barbera cartoon style, 2020s animation, clean vector art, bold outlines, flat colors, contemporary cartoon design, animated series style",realistic:"photorealistic, detailed, high quality",artistic:"artistic, painterly, creative, stylized",comic:"comic book style, bold lines, dynamic"},n={vibrant:"vibrant saturated colors, bright cheerful palette, bold color choices",pastel:"soft pastel colors, gentle tones, muted palette",monochrome:"black and white, high contrast, grayscale"};return`${e}, ${o[r.style]}, ${n[r.colorScheme]}, family-friendly, safe for work, no text, high quality, smooth gradients, modern cartoon illustration`}};var B=async t=>{console.log("Image generation request:",JSON.stringify(t,null,2));try{let e=t.body?JSON.parse(t.body):{},{prompt:r,style:o="photographic"}=e;if(!r||typeof r!="string")return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Prompt is required."})};let s=await u.getInstance().generateImage(r,o);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,result:s})}}catch(e){console.error("Error generating image:",e);let r=process.env.DEBUG_ERRORS==="true",o={error:"Failed to generate image",message:e instanceof Error?e.message:"Unknown error"};return r&&(o.debug={name:e.name,code:e.code,statusCode:e.$metadata?.httpStatusCode,requestId:e.$metadata?.requestId,retryable:e.$retryable,fault:e.$fault,stack:e instanceof Error?e.stack:void 0,fullError:JSON.stringify(e,Object.getOwnPropertyNames(e),2)},e.$response&&(o.debug.httpResponse={statusCode:e.$response.statusCode,statusMessage:e.$response.statusMessage,headers:e.$response.headers})),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify(o)}}};0&&(module.exports={handler});
//# sourceMappingURL=image-generation.js.map
