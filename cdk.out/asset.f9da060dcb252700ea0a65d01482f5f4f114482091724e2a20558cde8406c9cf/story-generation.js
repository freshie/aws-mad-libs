// Lambda function built with esbuild
"use strict";var O=Object.create;var h=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var _=(r,e)=>{for(var n in e)h(r,n,{get:e[n],enumerable:!0})},A=(r,e,n,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of k(e))!B.call(r,o)&&o!==n&&h(r,o,{get:()=>e[o],enumerable:!(t=R(e,o))||t.enumerable});return r};var E=(r,e,n)=>(n=r!=null?O(N(r)):{},A(e||!r||!r.__esModule?h(n,"default",{value:r,enumerable:!0}):n,r)),U=r=>A(h({},"__esModule",{value:!0}),r);var L={};_(L,{handler:()=>D});module.exports=U(L);var P=require("@aws-sdk/client-bedrock-runtime");var I=E(require("crypto")),f=new Uint8Array(256),w=f.length;function b(){return w>f.length-16&&(I.default.randomFillSync(f),w=0),f.slice(w,w+=16)}var i=[];for(let r=0;r<256;++r)i.push((r+256).toString(16).slice(1));function C(r,e=0){return i[r[e+0]]+i[r[e+1]]+i[r[e+2]]+i[r[e+3]]+"-"+i[r[e+4]]+i[r[e+5]]+"-"+i[r[e+6]]+i[r[e+7]]+"-"+i[r[e+8]]+i[r[e+9]]+"-"+i[r[e+10]]+i[r[e+11]]+i[r[e+12]]+i[r[e+13]]+i[r[e+14]]+i[r[e+15]]}var S=E(require("crypto")),T={randomUUID:S.default.randomUUID};function M(r,e,n){if(T.randomUUID&&!e&&!r)return T.randomUUID();r=r||{};let t=r.random||(r.rng||b)();if(t[6]=t[6]&15|64,t[8]=t[8]&63|128,e){n=n||0;for(let o=0;o<16;++o)e[n+o]=t[o];return e}return C(t)}var s=M;var x=class r{constructor(){this.bedrockClient=null;this.useMock=!1,console.log("StoryGenerator constructor - using IAM role credentials"),this.bedrockClient=new P.BedrockRuntimeClient({region:process.env.AWS_REGION||"us-east-1"})}static{this.instance=null}static getInstance(){return r.instance||(r.instance=new r),r.instance}static resetInstance(){r.instance=null}async generateTemplate(e,n=4){if(this.useMock)return this.generateMockTemplate(e,n);try{let t=this.createTemplatePrompt(e,n),o=await this.invokeBedrockModel(t);return this.parseTemplateResponse(o,e,n)}catch(t){return console.error("Error generating story template with Bedrock, falling back to mock:",t),this.generateMockTemplate(e,n)}}async fillTemplate(e,n){try{let t=e.paragraphs.map(a=>a.text).join(" "),o=[];console.log("\u26A1 === LAMBDA STORY GENERATOR ==="),console.log("\u26A1 Full story text:",t),console.log("\u26A1 Processing",n.length,"word submissions"),n.forEach((a,y)=>{let c=`{${this.wordTypeToPlaceholder(a.wordType)}}`;console.log(`\u26A1 Word ${y+1}/${n.length}: "${a.word}" for placeholder "${c}"`);let u=t.indexOf(c);u!==-1?(o.push({word:a.word,playerUsername:a.playerUsername,wordType:a.wordType,startIndex:u,endIndex:u+a.word.length}),t=t.replace(c,a.word),console.log(`\u26A1 Replaced "${c}" with "${a.word}"`)):console.error(`\u26A1 Could not find placeholder "${c}" in story`)});let l=e.paragraphs.map(a=>a.text),g=this.splitFilledTextIntoParagraphs(t,l),d=e.paragraphs.map((a,y)=>({id:a.id,text:g[y]||a.text,imageUrl:null,wordHighlights:[]})),p=this.createPlayerContributions(n);return{id:s(),title:e.title,theme:e.theme,paragraphs:d,playerContributions:p,createdAt:new Date}}catch(t){throw console.error("Error filling template:",t),t}}validateTemplate(e){return!e||!e.paragraphs||e.paragraphs.length===0?!1:e.paragraphs.every(n=>n.wordBlanks&&n.wordBlanks.length>0)}async invokeBedrockModel(e){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let n=process.env.BEDROCK_MODEL_ID||"amazon.nova-lite-v1:0",t={messages:[{role:"user",content:[{text:e}]}],inferenceConfig:{max_new_tokens:2e3,temperature:.7,top_p:.9}},o=new P.InvokeModelCommand({modelId:n,body:JSON.stringify(t),contentType:"application/json",accept:"application/json"}),l=await this.bedrockClient.send(o);return JSON.parse(new TextDecoder().decode(l.body)).output.message.content[0].text}createTemplatePrompt(e,n=4){return`Create a Mad Libs story template ${e?`with a ${e} theme`:"with any fun theme"} that will be fun when filled with random words. 

Requirements:
- Create a story with exactly 4 paragraphs
- Each paragraph must have exactly 4 sentences
- Include exactly 16 word blanks total (exactly 4 per paragraph, 1 per sentence)
- Use these word types: noun, verb, adjective, adverb, plural_noun, past_tense_verb, color, number, place, person
- Make the story family-friendly but funny
- Each sentence should have exactly ONE word blank
- Use placeholders like {noun}, {adjective}, etc.
- Structure: 4 paragraphs \xD7 4 sentences \xD7 1 word = 16 words total
- Include an image description for each paragraph

Format your response as JSON:
{
  "title": "Story Title",
  "theme": "${e||"adventure"}",
  "paragraphs": [
    {
      "text": "Story text with {word_type} placeholders",
      "imagePrompt": "Description for AI image generation"
    }
  ]
}

Make it creative and funny!`}parseTemplateResponse(e,n,t=4){try{let o=e.trim();o.startsWith("```json")?o=o.replace(/^```json\s*/,"").replace(/\s*```$/,""):o.startsWith("```")&&(o=o.replace(/^```\s*/,"").replace(/\s*```$/,""));let l=JSON.parse(o),g=l.paragraphs.map((p,m)=>{let a=[],y=0,c=/\{(\w+)\}/g,u;for(;(u=c.exec(p.text))!==null;){let v=this.normalizeWordType(u[1]);v&&a.push({id:s(),type:v,position:y++,assignedPlayerId:null})}return{id:s(),text:p.text,wordBlanks:a,imagePrompt:p.imagePrompt||`Scene from paragraph ${m+1}`}}),d=g.reduce((p,m)=>p+m.wordBlanks.length,0);return d!==16?(console.log(`AI generated ${d} words (expected 16), falling back to mock template`),this.generateMockTemplate(n,t)):{id:s(),title:l.title||"AI Generated Story",paragraphs:g,totalWordBlanks:d,theme:n||l.theme||"adventure",difficulty:"medium"}}catch(o){throw console.error("Error parsing template response:",o),new Error("Failed to parse AI response")}}normalizeWordType(e){let n=e.toLowerCase().replace(/[_\s]/g,"_");return{noun:"noun",verb:"verb",adjective:"adjective",adverb:"adverb",plural_noun:"plural_noun",past_tense_verb:"past_tense_verb",color:"color",number:"number",place:"place",person:"person"}[n]||null}generateMockTemplate(e,n=4){let t=[{id:s(),text:"Once upon a time, there was a {adjective} {noun} who loved to {verb} {adverb}.",wordBlanks:[{id:s(),type:"adjective",position:0,assignedPlayerId:null},{id:s(),type:"noun",position:1,assignedPlayerId:null},{id:s(),type:"verb",position:2,assignedPlayerId:null},{id:s(),type:"adverb",position:3,assignedPlayerId:null}],imagePrompt:"A whimsical character in a fairy tale setting"},{id:s(),text:"Every day, they would visit the {color} {place} with {number} {plural_noun}.",wordBlanks:[{id:s(),type:"color",position:0,assignedPlayerId:null},{id:s(),type:"place",position:1,assignedPlayerId:null},{id:s(),type:"number",position:2,assignedPlayerId:null},{id:s(),type:"plural_noun",position:3,assignedPlayerId:null}],imagePrompt:"A colorful location with various objects"},{id:s(),text:"One day, {person} {past_tense_verb} and everything changed forever!",wordBlanks:[{id:s(),type:"person",position:0,assignedPlayerId:null},{id:s(),type:"past_tense_verb",position:1,assignedPlayerId:null}],imagePrompt:"A dramatic moment with a person taking action"}],o=t.flatMap(l=>l.wordBlanks);return{id:s(),title:"A Magical Adventure",paragraphs:t,totalWordBlanks:o.length,theme:e||"adventure",difficulty:"easy"}}wordTypeToPlaceholder(e){switch(e){case"noun":return"noun";case"verb":return"verb";case"adjective":return"adjective";case"adverb":return"adverb";case"plural_noun":return"plural_noun";case"past_tense_verb":return"past_tense_verb";case"color":return"color";case"number":return"number";case"place":return"place";case"person":return"person";default:return String(e).toLowerCase()}}splitFilledTextIntoParagraphs(e,n){let t=[],o=e;for(let l=0;l<n.length;l++){let d=n[l].split(/\s+/).length,p=o.split(/\s+/),a=p.slice(0,d).join(" ");t.push(a),o=p.slice(d).join(" ")}return t}createPlayerContributions(e){let n=new Map;return e.forEach(t=>{n.has(t.playerId)||n.set(t.playerId,{playerId:t.playerId,playerUsername:t.playerUsername,wordsContributed:[]}),n.get(t.playerId).wordsContributed.push(t.word)}),Array.from(n.values())}};var D=async r=>{console.log("Story generation request:",JSON.stringify(r,null,2));try{let e=r.body?JSON.parse(r.body):{},{theme:n,playerCount:t}=e;if(!t||t<1||t>8)return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid player count. Must be between 1 and 8."})};let l=await x.getInstance().generateTemplate(n,t);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,template:l})}}catch(e){return console.error("Error generating story template:",e),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Failed to generate story template",message:e instanceof Error?e.message:"Unknown error"})}}};0&&(module.exports={handler});
//# sourceMappingURL=story-generation.js.map
