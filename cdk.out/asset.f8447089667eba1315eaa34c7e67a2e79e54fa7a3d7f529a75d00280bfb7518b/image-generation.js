// Lambda function built with esbuild
"use strict";var x=Object.create;var c=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var O=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var T=(t,e)=>{for(var o in e)c(t,o,{get:e[o],enumerable:!0})},I=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of P(e))!E.call(t,n)&&n!==o&&c(t,n,{get:()=>e[n],enumerable:!(r=k(e,n))||r.enumerable});return t};var b=(t,e,o)=>(o=t!=null?x(O(t)):{},I(e||!t||!t.__esModule?c(o,"default",{value:t,enumerable:!0}):o,t)),N=t=>I(c({},"__esModule",{value:!0}),t);var M={};T(M,{handler:()=>R});module.exports=N(M);var y=require("@aws-sdk/client-bedrock-runtime"),l=require("@aws-sdk/client-s3"),A=require("@aws-sdk/s3-request-presigner");var S=b(require("crypto")),d=new Uint8Array(256),m=d.length;function h(){return m>d.length-16&&(S.default.randomFillSync(d),m=0),d.slice(m,m+=16)}var s=[];for(let t=0;t<256;++t)s.push((t+256).toString(16).slice(1));function v(t,e=0){return s[t[e+0]]+s[t[e+1]]+s[t[e+2]]+s[t[e+3]]+"-"+s[t[e+4]]+s[t[e+5]]+"-"+s[t[e+6]]+s[t[e+7]]+"-"+s[t[e+8]]+s[t[e+9]]+"-"+s[t[e+10]]+s[t[e+11]]+s[t[e+12]]+s[t[e+13]]+s[t[e+14]]+s[t[e+15]]}var C=b(require("crypto")),f={randomUUID:C.default.randomUUID};function B(t,e,o){if(f.randomUUID&&!e&&!t)return f.randomUUID();t=t||{};let r=t.random||(t.rng||h)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){o=o||0;for(let n=0;n<16;++n)e[o+n]=r[n];return e}return v(r)}var g=B;var u=class t{constructor(){this.bedrockClient=null;this.s3Client=null;this.bucketName=process.env.IMAGES_BUCKET_NAME||process.env.S3_BUCKET_NAME||"ai-mad-libs-media",console.log("ImageGenerator constructor - using AWS Bedrock for image generation with IAM role");let e=process.env.AWS_REGION||"us-east-1";this.bedrockClient=new y.BedrockRuntimeClient({region:e}),this.s3Client=new l.S3Client({region:e})}static{this.instance=null}static getInstance(){return t.instance||(t.instance=new t),t.instance}static resetInstance(){t.instance=null}async generateImage(e,o={style:"cartoon",colorScheme:"vibrant"}){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");return this.generateImageWithRetry(e,o,0)}async generateImageWithRetry(e,o,r){let i=[0,15e3,3e4,6e4,12e4];try{r>0&&(console.log(`\u23F3 Retrying image generation (attempt ${r+1}/4) after ${i[r]/1e3}s delay`),await this.sleep(i[r])),console.log("\u{1F3A8} Generating image with Bedrock Nova:",e);let a=this.enhancePrompt(e,o),p=await this.invokeBedrockImageModel(a),w=await this.uploadToS3(p,e);return console.log("\u2705 Image generated successfully:",w),{id:g(),url:w,prompt:a,width:512,height:512,createdAt:new Date}}catch(a){if(console.error(`\u274C Error generating image (attempt ${r+1}):`,a),a.name==="ThrottlingException"&&r<3)return console.log(`\u{1F504} Throttling detected, will retry in ${i[r+1]/1e3} seconds...`),this.generateImageWithRetry(e,o,r+1);throw console.error("\u{1F6A8} All retry attempts failed or non-throttling error"),console.error("Error details:",{message:a.message,name:a.name,code:a.code||"Unknown"}),a}}sleep(e){return new Promise(o=>setTimeout(o,e))}async generateBatch(e,o={style:"cartoon",colorScheme:"vibrant"}){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");let r=[];for(let n=0;n<e.length;n++){let i=e[n];try{console.log(`\u{1F3A8} Generating batch image ${n+1}/${e.length}`);let a=await this.generateImage(i,o);r.push(a),n<e.length-1&&(console.log("\u23F3 Waiting 5 seconds before next batch image..."),await this.sleep(5e3))}catch(a){throw console.error(`Error generating batch image for prompt "${i}":`,a),a}}return r}async optimizeForVideo(e){return{...e,width:1024,height:576}}async invokeBedrockImageModel(e){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let o=process.env.BEDROCK_IMAGE_MODEL_ID||"amazon.nova-canvas-v1:0",r={taskType:"TEXT_IMAGE",textToImageParams:{text:e,negativeText:"blurry, low quality, distorted, text, watermark, signature"},imageGenerationConfig:{numberOfImages:1,height:512,width:512,cfgScale:8,seed:Math.floor(Math.random()*1e6)}},n=new y.InvokeModelCommand({modelId:o,body:JSON.stringify(r),contentType:"application/json",accept:"application/json"});try{console.log("\u{1F4E1} Calling Bedrock Nova API with payload:",JSON.stringify(r,null,2));let i=await this.bedrockClient.send(n),a=JSON.parse(new TextDecoder().decode(i.body));if(console.log("\u{1F4E5} Bedrock response received:",{hasImages:!!a.images,imageCount:a.images?.length||0}),!a.images||a.images.length===0)throw new Error("No image generated by Bedrock Nova");let p=a.images[0];return new Uint8Array(Buffer.from(p,"base64"))}catch(i){throw console.error("\u{1F6A8} Bedrock API call failed:",i),i.name==="ValidationException"?console.error("\u{1F4A1} This is likely a payload format issue"):i.name==="ThrottlingException"?console.error("\u{1F6A6} Rate limit exceeded - will retry with backoff"):i.name==="ServiceQuotaExceededException"&&console.error("\u{1F4CA} Service quota exceeded - may need to request limit increase"),i}}async uploadToS3(e,o){if(!this.s3Client)throw new Error("S3 client not initialized");let r=`images/${g()}.png`,n=new l.PutObjectCommand({Bucket:this.bucketName,Key:r,Body:e,ContentType:"image/png",Metadata:{prompt:o.substring(0,1e3),generatedAt:new Date().toISOString()}});await this.s3Client.send(n);let i=process.env.CLOUDFRONT_DOMAIN;if(i)return`https://${i}/${r}`;{let a=new l.GetObjectCommand({Bucket:this.bucketName,Key:r});return await(0,A.getSignedUrl)(this.s3Client,a,{expiresIn:7*24*60*60})}}enhancePrompt(e,o){let r={cartoon:"modern Hanna-Barbera cartoon style, 2020s animation, clean vector art, bold outlines, flat colors, contemporary cartoon design, animated series style",realistic:"photorealistic, detailed, high quality",artistic:"artistic, painterly, creative, stylized",comic:"comic book style, bold lines, dynamic"},n={vibrant:"vibrant saturated colors, bright cheerful palette, bold color choices",pastel:"soft pastel colors, gentle tones, muted palette",monochrome:"black and white, high contrast, grayscale"};return`${e}, ${r[o.style]}, ${n[o.colorScheme]}, family-friendly, safe for work, no text, high quality, smooth gradients, modern cartoon illustration`}};var R=async t=>{console.log("Image generation request:",JSON.stringify(t,null,2));try{let e=t.body?JSON.parse(t.body):{},{prompt:o,style:r="photographic"}=e;if(!o||typeof o!="string")return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Prompt is required."})};let i=await u.getInstance().generateImage(o,r);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,result:i})}}catch(e){console.error("Error generating image:",e);let o=process.env.DEBUG_ERRORS==="true",r={error:"Failed to generate image",message:e instanceof Error?e.message:"Unknown error"};return o&&(r.debug={name:e.name,code:e.code,statusCode:e.$metadata?.httpStatusCode,requestId:e.$metadata?.requestId,retryable:e.$retryable,fault:e.$fault,stack:e instanceof Error?e.stack:void 0,fullError:JSON.stringify(e,Object.getOwnPropertyNames(e),2)},e.$response&&(r.debug.httpResponse={statusCode:e.$response.statusCode,statusMessage:e.$response.statusMessage,headers:e.$response.headers})),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify(r)}}};0&&(module.exports={handler});
//# sourceMappingURL=image-generation.js.map
