// Lambda function built with esbuild
"use strict";var O=Object.create;var h=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var _=(r,e)=>{for(var t in e)h(r,t,{get:e[t],enumerable:!0})},v=(r,e,t,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of k(e))!B.call(r,o)&&o!==t&&h(r,o,{get:()=>e[o],enumerable:!(n=R(e,o))||n.enumerable});return r};var E=(r,e,t)=>(t=r!=null?O(N(r)):{},v(e||!r||!r.__esModule?h(t,"default",{value:r,enumerable:!0}):t,r)),U=r=>v(h({},"__esModule",{value:!0}),r);var L={};_(L,{handler:()=>M});module.exports=U(L);var P=require("@aws-sdk/client-bedrock-runtime");var I=E(require("crypto")),f=new Uint8Array(256),w=f.length;function T(){return w>f.length-16&&(I.default.randomFillSync(f),w=0),f.slice(w,w+=16)}var i=[];for(let r=0;r<256;++r)i.push((r+256).toString(16).slice(1));function C(r,e=0){return i[r[e+0]]+i[r[e+1]]+i[r[e+2]]+i[r[e+3]]+"-"+i[r[e+4]]+i[r[e+5]]+"-"+i[r[e+6]]+i[r[e+7]]+"-"+i[r[e+8]]+i[r[e+9]]+"-"+i[r[e+10]]+i[r[e+11]]+i[r[e+12]]+i[r[e+13]]+i[r[e+14]]+i[r[e+15]]}var S=E(require("crypto")),b={randomUUID:S.default.randomUUID};function D(r,e,t){if(b.randomUUID&&!e&&!r)return b.randomUUID();r=r||{};let n=r.random||(r.rng||T)();if(n[6]=n[6]&15|64,n[8]=n[8]&63|128,e){t=t||0;for(let o=0;o<16;++o)e[t+o]=n[o];return e}return C(n)}var s=D;var x=class r{constructor(){this.bedrockClient=null;this.useMock=!1,console.log("StoryGenerator constructor - using IAM role credentials"),this.bedrockClient=new P.BedrockRuntimeClient({region:process.env.AWS_REGION||"us-east-1"})}static{this.instance=null}static getInstance(){return r.instance||(r.instance=new r),r.instance}static resetInstance(){r.instance=null}async generateTemplate(e,t=4){if(this.useMock)return this.generateMockTemplate(e,t);try{let n=this.createTemplatePrompt(e,t),o=await this.invokeBedrockModel(n);return this.parseTemplateResponse(o,e,t)}catch(n){return console.error("Error generating story template with Bedrock, falling back to mock:",n),this.generateMockTemplate(e,t)}}async fillTemplate(e,t){try{let n=e.paragraphs.map(a=>a.text).join(" "),o=[];console.log("\u26A1 === LAMBDA STORY GENERATOR ==="),console.log("\u26A1 Full story text:",n),console.log("\u26A1 Processing",t.length,"word submissions"),t.forEach((a,m)=>{let c=`{${this.wordTypeToPlaceholder(a.wordType)}}`;console.log(`\u26A1 Word ${m+1}/${t.length}: "${a.word}" for placeholder "${c}"`);let u=n.indexOf(c);u!==-1?(o.push({word:a.word,playerUsername:a.playerUsername,wordType:a.wordType,startIndex:u,endIndex:u+a.word.length}),n=n.replace(c,a.word),console.log(`\u26A1 Replaced "${c}" with "${a.word}"`)):console.error(`\u26A1 Could not find placeholder "${c}" in story`)});let l=e.paragraphs.map(a=>a.text),g=this.splitFilledTextIntoParagraphs(n,l),d=e.paragraphs.map((a,m)=>({id:a.id,text:g[m]||a.text,imageUrl:null,wordHighlights:[]})),p=this.createPlayerContributions(t);return{id:s(),title:e.title,theme:e.theme,paragraphs:d,playerContributions:p,createdAt:new Date}}catch(n){throw console.error("Error filling template:",n),n}}validateTemplate(e){return!e||!e.paragraphs||e.paragraphs.length===0?!1:e.paragraphs.every(t=>t.wordBlanks&&t.wordBlanks.length>0)}async invokeBedrockModel(e){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let t=process.env.BEDROCK_MODEL_ID||"amazon.nova-lite-v1:0",n={messages:[{role:"user",content:[{text:e}]}],inferenceConfig:{max_new_tokens:2e3,temperature:.7,top_p:.9}},o=new P.InvokeModelCommand({modelId:t,body:JSON.stringify(n),contentType:"application/json",accept:"application/json"}),l=await this.bedrockClient.send(o);return JSON.parse(new TextDecoder().decode(l.body)).output.message.content[0].text}createTemplatePrompt(e,t=4){return`Create a Mad Libs story template ${e?`with a ${e} theme`:"with any fun theme"} that will be fun when filled with random words. 

Requirements:
- Create a story with exactly 4 paragraphs
- Each paragraph must have exactly 4 sentences
- Include exactly 16 word blanks total (exactly 4 per paragraph, 1 per sentence)
- Use these word types: noun, verb, adjective, adverb, plural_noun, past_tense_verb, color, number, place, person
- Make the story family-friendly but funny
- Each sentence should have exactly ONE word blank
- Use placeholders like {noun}, {adjective}, etc.
- Structure: 4 paragraphs \xD7 4 sentences \xD7 1 word = 16 words total
- Include an image description for each paragraph

Format your response as JSON:
{
  "title": "Story Title",
  "theme": "${e||"adventure"}",
  "paragraphs": [
    {
      "text": "Story text with {word_type} placeholders",
      "imagePrompt": "Description for AI image generation"
    }
  ]
}

Make it creative and funny!`}parseTemplateResponse(e,t,n=4){try{let o=e.trim();o.startsWith("```json")?o=o.replace(/^```json\s*/,"").replace(/\s*```$/,""):o.startsWith("```")&&(o=o.replace(/^```\s*/,"").replace(/\s*```$/,""));let l=JSON.parse(o),g=l.paragraphs.map((p,y)=>{let a=[],m=0,c=/\{(\w+)\}/g,u;for(;(u=c.exec(p.text))!==null;){let A=this.normalizeWordType(u[1]);A&&a.push({id:s(),type:A,position:m++,assignedPlayerId:null})}return{id:s(),text:p.text,wordBlanks:a,imagePrompt:p.imagePrompt||`Scene from paragraph ${y+1}`}}),d=g.reduce((p,y)=>p+y.wordBlanks.length,0);return d!==16?(console.log(`AI generated ${d} words (expected 16), falling back to mock template`),this.generateMockTemplate(t,n)):{id:s(),title:l.title||"AI Generated Story",paragraphs:g,totalWordBlanks:d,theme:t||l.theme||"adventure",difficulty:"medium"}}catch(o){throw console.error("Error parsing template response:",o),new Error("Failed to parse AI response")}}normalizeWordType(e){let t=e.toLowerCase().replace(/[_\s]/g,"_");return{noun:"noun",verb:"verb",adjective:"adjective",adverb:"adverb",plural_noun:"plural_noun",past_tense_verb:"past_tense_verb",color:"color",number:"number",place:"place",person:"person"}[t]||null}generateMockTemplate(e,t=4){let n=[{id:s(),text:"Once upon a time, there was a {adjective} {noun} who loved to {verb} {adverb}.",wordBlanks:[{id:s(),type:"adjective",position:0,assignedPlayerId:null},{id:s(),type:"noun",position:1,assignedPlayerId:null},{id:s(),type:"verb",position:2,assignedPlayerId:null},{id:s(),type:"adverb",position:3,assignedPlayerId:null}],imagePrompt:"A whimsical character in a fairy tale setting"},{id:s(),text:"Every day, they would visit the {color} {place} with {number} {plural_noun}.",wordBlanks:[{id:s(),type:"color",position:0,assignedPlayerId:null},{id:s(),type:"place",position:1,assignedPlayerId:null},{id:s(),type:"number",position:2,assignedPlayerId:null},{id:s(),type:"plural_noun",position:3,assignedPlayerId:null}],imagePrompt:"A colorful location with various objects"},{id:s(),text:"One day, {person} {past_tense_verb} and everything changed forever!",wordBlanks:[{id:s(),type:"person",position:0,assignedPlayerId:null},{id:s(),type:"past_tense_verb",position:1,assignedPlayerId:null}],imagePrompt:"A dramatic moment with a person taking action"}],o=n.flatMap(l=>l.wordBlanks);return{id:s(),title:"A Magical Adventure",paragraphs:n,totalWordBlanks:o.length,theme:e||"adventure",difficulty:"easy"}}wordTypeToPlaceholder(e){switch(e){case"noun":return"noun";case"verb":return"verb";case"adjective":return"adjective";case"adverb":return"adverb";case"plural_noun":return"plural_noun";case"past_tense_verb":return"past_tense_verb";case"color":return"color";case"number":return"number";case"place":return"place";case"person":return"person";default:return String(e).toLowerCase()}}splitFilledTextIntoParagraphs(e,t){let n=[],o=e;for(let l=0;l<t.length;l++){let d=t[l].split(/\s+/).length,p=o.split(/\s+/),a=p.slice(0,d).join(" ");n.push(a),o=p.slice(d).join(" ")}return n}createPlayerContributions(e){let t=new Map;return e.forEach(n=>{t.has(n.playerId)||t.set(n.playerId,{playerId:n.playerId,playerUsername:n.playerUsername,wordsContributed:[]}),t.get(n.playerId).wordsContributed.push(n.word)}),Array.from(t.values())}};var M=async r=>{console.log("Story fill request:",JSON.stringify(r,null,2));try{let e=r.body?JSON.parse(r.body):{},{template:t,words:n}=e;if(!t||!n||!Array.isArray(n))return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Template and words array are required."})};let l=await x.getInstance().fillTemplate(t,n);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,story:l})}}catch(e){return console.error("Error filling story template:",e),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Failed to fill story template",message:e instanceof Error?e.message:"Unknown error"})}}};0&&(module.exports={handler});
//# sourceMappingURL=story-fill.js.map
