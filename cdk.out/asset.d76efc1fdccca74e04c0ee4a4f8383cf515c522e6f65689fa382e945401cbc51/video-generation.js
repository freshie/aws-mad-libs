// Lambda function built with esbuild
"use strict";var x=Object.create;var d=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var O=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,P=Object.prototype.hasOwnProperty;var T=(t,e)=>{for(var o in e)d(t,o,{get:e[o],enumerable:!0})},w=(t,e,o,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of O(e))!P.call(t,n)&&n!==o&&d(t,n,{get:()=>e[n],enumerable:!(r=N(e,n))||r.enumerable});return t};var S=(t,e,o)=>(o=t!=null?x(I(t)):{},w(e||!t||!t.__esModule?d(o,"default",{value:t,enumerable:!0}):o,t)),D=t=>w(d({},"__esModule",{value:!0}),t);var k={};T(k,{handler:()=>V});module.exports=D(k);var y=require("@aws-sdk/client-bedrock-runtime"),v=require("@aws-sdk/client-s3");var A=S(require("crypto")),u=new Uint8Array(256),m=u.length;function h(){return m>u.length-16&&(A.default.randomFillSync(u),m=0),u.slice(m,m+=16)}var i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));function C(t,e=0){return i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]}var b=S(require("crypto")),f={randomUUID:b.default.randomUUID};function E(t,e,o){if(f.randomUUID&&!e&&!t)return f.randomUUID();t=t||{};let r=t.random||(t.rng||h)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,e){o=o||0;for(let n=0;n<16;++n)e[o+n]=r[n];return e}return C(r)}var g=E;var p=class t{constructor(){this.bedrockClient=null;this.s3Client=null;this.bucketName=process.env.IMAGES_BUCKET_NAME||process.env.S3_BUCKET_NAME||"ai-mad-libs-media",console.log("VideoGenerator constructor - using AWS Bedrock Nova Reel for video generation");let e=process.env.AWS_REGION||"us-east-1";this.bedrockClient=new y.BedrockRuntimeClient({region:e}),this.s3Client=new v.S3Client({region:e})}static{this.instance=null}static getInstance(){return t.instance||(t.instance=new t),t.instance}static resetInstance(){t.instance=null}async generateStoryVideo(e){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized.");console.log("\u{1F3AC} Generating story video with Nova Reel:",e.title),console.log("\u{1F4F8} Number of images:",e.images.length);try{let o=this.createVideoPrompt(e),r=await this.downloadImagesAsBase64(e.images.map(s=>s.url)),n=await this.invokeNovaReelModel(o,r,e),a=await this.uploadVideoToS3(n,e.title);return console.log("\u2705 Story video generated successfully:",a),{id:g(),url:a,prompt:o,duration:this.calculateVideoDuration(e),width:1024,height:576,createdAt:new Date}}catch(o){throw console.error("\u274C Error generating story video:",o),o}}createVideoPrompt(e){let o=e.images.map((r,n)=>`Scene ${n+1}: ${r.text}`).join(". ");return`Create an animated story video: "${e.title}". ${e.overallNarrative}. ${o}. Style: smooth transitions between scenes, gentle camera movements, storytelling pace, family-friendly animation.`}async downloadImagesAsBase64(e){console.log("\u{1F4E5} Downloading images for video generation:",e.length);let o=[];for(let r of e)try{let n=await fetch(r);if(!n.ok)throw new Error(`Failed to download image: ${n.status}`);let a=await n.arrayBuffer(),s=Buffer.from(a).toString("base64");o.push(s)}catch(n){throw console.error(`\u274C Failed to download image ${r}:`,n),n}return console.log("\u2705 All images converted to base64"),o}async invokeNovaReelModel(e,o,r){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let n=process.env.BEDROCK_VIDEO_MODEL_ID||"amazon.nova-reel-v1:0",a={taskType:"TEXT_VIDEO",textToVideoParams:{text:e,images:o,durationSeconds:this.calculateVideoDuration(r),fps:24,dimension:"1024x576",motionStrength:.6,seed:Math.floor(Math.random()*1e6)}},s=new y.InvokeModelCommand({modelId:n,body:JSON.stringify(a),contentType:"application/json",accept:"application/json"});try{console.log("\u{1F4E1} Calling Nova Reel API with payload:",JSON.stringify({...a,images:`[${o.length} images]`},null,2));let l=await this.bedrockClient.send(s),c=JSON.parse(new TextDecoder().decode(l.body));if(console.log("\u{1F4E5} Nova Reel response received:",{hasVideo:!!c.video,videoSize:c.video?.length||0}),!c.video)throw new Error("No video generated by Nova Reel");return new Uint8Array(Buffer.from(c.video,"base64"))}catch(l){throw console.error("\u{1F6A8} Nova Reel API call failed:",l),l}}async uploadVideoToS3(e,o){if(!this.s3Client)throw new Error("S3 client not initialized");let r=`videos/${g()}-${o.replace(/[^a-zA-Z0-9]/g,"-")}.mp4`,n=new v.PutObjectCommand({Bucket:this.bucketName,Key:r,Body:e,ContentType:"video/mp4",Metadata:{title:o,generated:new Date().toISOString()}});return await this.s3Client.send(n),`https://${process.env.CLOUDFRONT_DOMAIN||"d1657msoon2g7h.cloudfront.net"}/${r}`}calculateVideoDuration(e){let r=Math.max(2,Math.min(8,e.overallNarrative.length/100));return Math.min(30,e.images.length*4+r)}};var V=async t=>{console.log("Video generation request:",JSON.stringify(t,null,2));try{let e=t.body?JSON.parse(t.body):{},{storyInput:o}=e;if(!o||!o.images||o.images.length===0)return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Story input with images is required."})};let n=await p.getInstance().generateStoryVideo(o);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,result:n})}}catch(e){console.error("Error generating video:",e);let o=process.env.DEBUG_ERRORS==="true",r={error:"Failed to generate video",message:e instanceof Error?e.message:"Unknown error"};return o&&(r.debug={name:e.name,code:e.code,stack:e instanceof Error?e.stack:void 0,fullError:JSON.stringify(e,Object.getOwnPropertyNames(e),2)}),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify(r)}}};0&&(module.exports={handler});
//# sourceMappingURL=video-generation.js.map
