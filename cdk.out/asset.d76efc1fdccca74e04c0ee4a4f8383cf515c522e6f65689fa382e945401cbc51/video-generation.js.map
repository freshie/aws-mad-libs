{
  "version": 3,
  "sources": ["../src/video-generation.ts", "../src/services/VideoGenerator.ts", "../node_modules/uuid/dist/esm-node/rng.js", "../node_modules/uuid/dist/esm-node/stringify.js", "../node_modules/uuid/dist/esm-node/native.js", "../node_modules/uuid/dist/esm-node/v4.js"],
  "sourcesContent": ["import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\r\nimport { VideoGenerator, StoryVideoInput } from './services/VideoGenerator';\r\n\r\nexport const handler = async (\r\n  event: APIGatewayProxyEvent\r\n): Promise<APIGatewayProxyResult> => {\r\n  console.log('Video generation request:', JSON.stringify(event, null, 2));\r\n\r\n  try {\r\n    // Parse request body\r\n    const body = event.body ? JSON.parse(event.body) : {};\r\n    const { storyInput }: { storyInput: StoryVideoInput } = body;\r\n\r\n    // Validate input\r\n    if (!storyInput || !storyInput.images || storyInput.images.length === 0) {\r\n      return {\r\n        statusCode: 400,\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Headers': 'Content-Type',\r\n          'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n        },\r\n        body: JSON.stringify({\r\n          error: 'Invalid request. Story input with images is required.',\r\n        }),\r\n      };\r\n    }\r\n\r\n    // Generate video\r\n    const videoGenerator = VideoGenerator.getInstance();\r\n    const result = await videoGenerator.generateStoryVideo(storyInput);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      },\r\n      body: JSON.stringify({\r\n        success: true,\r\n        result,\r\n      }),\r\n    };\r\n  } catch (error) {\r\n    console.error('Error generating video:', error);\r\n\r\n    // Check if debug mode is enabled\r\n    const isDebugMode = process.env.DEBUG_ERRORS === 'true';\r\n    \r\n    let errorResponse: any = {\r\n      error: 'Failed to generate video',\r\n      message: error instanceof Error ? error.message : 'Unknown error',\r\n    };\r\n\r\n    // Add detailed error information in debug mode\r\n    if (isDebugMode) {\r\n      errorResponse.debug = {\r\n        name: (error as any).name,\r\n        code: (error as any).code,\r\n        stack: error instanceof Error ? error.stack : undefined,\r\n        fullError: JSON.stringify(error, Object.getOwnPropertyNames(error), 2)\r\n      };\r\n    }\r\n\r\n    return {\r\n      statusCode: 500,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Access-Control-Allow-Headers': 'Content-Type',\r\n        'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n      },\r\n      body: JSON.stringify(errorResponse),\r\n    };\r\n  }\r\n};", "import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime'\r\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport interface VideoResult {\r\n  id: string\r\n  url: string\r\n  prompt: string\r\n  duration: number\r\n  width: number\r\n  height: number\r\n  createdAt: Date\r\n}\r\n\r\nexport interface StoryVideoInput {\r\n  images: Array<{\r\n    url: string\r\n    text: string\r\n    duration?: number\r\n  }>\r\n  title: string\r\n  overallNarrative: string\r\n}\r\n\r\nexport class VideoGenerator {\r\n  private static instance: VideoGenerator | null = null\r\n  private bedrockClient: BedrockRuntimeClient | null = null\r\n  private s3Client: S3Client | null = null\r\n  private bucketName: string\r\n\r\n  private constructor() {\r\n    this.bucketName = process.env.IMAGES_BUCKET_NAME || process.env.S3_BUCKET_NAME || 'ai-mad-libs-media'\r\n    \r\n    console.log('VideoGenerator constructor - using AWS Bedrock Nova Reel for video generation')\r\n\r\n    const region = process.env.AWS_REGION || 'us-east-1'\r\n    \r\n    // Use IAM role credentials (no explicit credentials needed in Lambda)\r\n    this.bedrockClient = new BedrockRuntimeClient({ region })\r\n    this.s3Client = new S3Client({ region })\r\n  }\r\n\r\n  public static getInstance(): VideoGenerator {\r\n    if (!VideoGenerator.instance) {\r\n      VideoGenerator.instance = new VideoGenerator()\r\n    }\r\n    return VideoGenerator.instance\r\n  }\r\n\r\n  public static resetInstance(): void {\r\n    VideoGenerator.instance = null\r\n  }\r\n\r\n  async generateStoryVideo(storyInput: StoryVideoInput): Promise<VideoResult> {\r\n    if (!this.bedrockClient || !this.s3Client) {\r\n      throw new Error('AWS Bedrock and S3 clients are not initialized.')\r\n    }\r\n\r\n    console.log('\uD83C\uDFAC Generating story video with Nova Reel:', storyInput.title)\r\n    console.log('\uD83D\uDCF8 Number of images:', storyInput.images.length)\r\n\r\n    try {\r\n      // Create video prompt combining all story elements\r\n      const videoPrompt = this.createVideoPrompt(storyInput)\r\n      \r\n      // Download and convert images to base64\r\n      const imageBase64Array = await this.downloadImagesAsBase64(storyInput.images.map(img => img.url))\r\n      \r\n      // Generate video using Nova Reel\r\n      const videoData = await this.invokeNovaReelModel(videoPrompt, imageBase64Array, storyInput)\r\n      \r\n      // Upload video to S3\r\n      const videoUrl = await this.uploadVideoToS3(videoData, storyInput.title)\r\n\r\n      console.log('\u2705 Story video generated successfully:', videoUrl)\r\n      return {\r\n        id: uuidv4(),\r\n        url: videoUrl,\r\n        prompt: videoPrompt,\r\n        duration: this.calculateVideoDuration(storyInput),\r\n        width: 1024,\r\n        height: 576, // 16:9 aspect ratio\r\n        createdAt: new Date()\r\n      }\r\n    } catch (error) {\r\n      console.error('\u274C Error generating story video:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private createVideoPrompt(storyInput: StoryVideoInput): string {\r\n    const sceneDescriptions = storyInput.images.map((img, index) => \r\n      `Scene ${index + 1}: ${img.text}`\r\n    ).join('. ')\r\n\r\n    return `Create an animated story video: \"${storyInput.title}\". ${storyInput.overallNarrative}. ${sceneDescriptions}. Style: smooth transitions between scenes, gentle camera movements, storytelling pace, family-friendly animation.`\r\n  }\r\n\r\n  private async downloadImagesAsBase64(imageUrls: string[]): Promise<string[]> {\r\n    console.log('\uD83D\uDCE5 Downloading images for video generation:', imageUrls.length)\r\n    \r\n    const base64Images: string[] = []\r\n    \r\n    for (const url of imageUrls) {\r\n      try {\r\n        const response = await fetch(url)\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to download image: ${response.status}`)\r\n        }\r\n        \r\n        const arrayBuffer = await response.arrayBuffer()\r\n        const base64 = Buffer.from(arrayBuffer).toString('base64')\r\n        base64Images.push(base64)\r\n      } catch (error) {\r\n        console.error(`\u274C Failed to download image ${url}:`, error)\r\n        throw error\r\n      }\r\n    }\r\n    \r\n    console.log('\u2705 All images converted to base64')\r\n    return base64Images\r\n  }\r\n\r\n  private async invokeNovaReelModel(prompt: string, images: string[], storyInput: StoryVideoInput): Promise<Uint8Array> {\r\n    if (!this.bedrockClient) {\r\n      throw new Error('Bedrock client not initialized')\r\n    }\r\n\r\n    // Use Amazon Nova Reel model\r\n    const modelId = process.env.BEDROCK_VIDEO_MODEL_ID || 'amazon.nova-reel-v1:0'\r\n    \r\n    const payload = {\r\n      taskType: \"TEXT_VIDEO\", // or \"IMAGE_VIDEO\" if we want to use images as keyframes\r\n      textToVideoParams: {\r\n        text: prompt,\r\n        images: images, // Use our story images as keyframes\r\n        durationSeconds: this.calculateVideoDuration(storyInput),\r\n        fps: 24,\r\n        dimension: \"1024x576\", // 16:9 aspect ratio\r\n        motionStrength: 0.6, // Moderate motion for storytelling\r\n        seed: Math.floor(Math.random() * 1000000)\r\n      }\r\n    }\r\n\r\n    const command = new InvokeModelCommand({\r\n      modelId,\r\n      body: JSON.stringify(payload),\r\n      contentType: 'application/json',\r\n      accept: 'application/json'\r\n    })\r\n\r\n    try {\r\n      console.log('\uD83D\uDCE1 Calling Nova Reel API with payload:', JSON.stringify({...payload, images: `[${images.length} images]`}, null, 2))\r\n      const response = await this.bedrockClient.send(command)\r\n      const responseBody = JSON.parse(new TextDecoder().decode(response.body))\r\n      \r\n      console.log('\uD83D\uDCE5 Nova Reel response received:', {\r\n        hasVideo: !!responseBody.video,\r\n        videoSize: responseBody.video?.length || 0\r\n      })\r\n      \r\n      if (!responseBody.video) {\r\n        throw new Error('No video generated by Nova Reel')\r\n      }\r\n\r\n      // Decode base64 video data\r\n      return new Uint8Array(Buffer.from(responseBody.video, 'base64'))\r\n    } catch (error) {\r\n      console.error('\uD83D\uDEA8 Nova Reel API call failed:', error)\r\n      throw error\r\n    }\r\n  }\r\n\r\n  private async uploadVideoToS3(videoData: Uint8Array, title: string): Promise<string> {\r\n    if (!this.s3Client) {\r\n      throw new Error('S3 client not initialized')\r\n    }\r\n\r\n    const key = `videos/${uuidv4()}-${title.replace(/[^a-zA-Z0-9]/g, '-')}.mp4`\r\n    \r\n    const command = new PutObjectCommand({\r\n      Bucket: this.bucketName,\r\n      Key: key,\r\n      Body: videoData,\r\n      ContentType: 'video/mp4',\r\n      Metadata: {\r\n        title: title,\r\n        generated: new Date().toISOString()\r\n      }\r\n    })\r\n\r\n    await this.s3Client.send(command)\r\n\r\n    // Return CloudFront URL\r\n    const cloudfrontDomain = process.env.CLOUDFRONT_DOMAIN || 'd1657msoon2g7h.cloudfront.net'\r\n    return `https://${cloudfrontDomain}/${key}`\r\n  }\r\n\r\n  private calculateVideoDuration(storyInput: StoryVideoInput): number {\r\n    // Calculate duration based on text length and number of scenes\r\n    const baseTimePerScene = 4 // 4 seconds per scene\r\n    const textLengthFactor = Math.max(2, Math.min(8, storyInput.overallNarrative.length / 100)) // 2-8 seconds based on text length\r\n    \r\n    return Math.min(30, storyInput.images.length * baseTimePerScene + textLengthFactor) // Max 30 seconds\r\n  }\r\n}", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],
  "mappings": "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",
  "names": ["video_generation_exports", "__export", "handler", "__toCommonJS", "import_client_bedrock_runtime", "import_client_s3", "import_crypto", "rnds8Pool", "poolPtr", "rng", "crypto", "byteToHex", "i", "unsafeStringify", "arr", "offset", "import_crypto", "native_default", "crypto", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "i", "unsafeStringify", "v4_default", "VideoGenerator", "_VideoGenerator", "region", "storyInput", "videoPrompt", "imageBase64Array", "img", "videoData", "videoUrl", "v4_default", "error", "sceneDescriptions", "index", "imageUrls", "base64Images", "url", "response", "arrayBuffer", "base64", "prompt", "images", "modelId", "payload", "command", "responseBody", "title", "key", "textLengthFactor", "handler", "event", "body", "storyInput", "result", "VideoGenerator", "error", "isDebugMode", "errorResponse"]
}
