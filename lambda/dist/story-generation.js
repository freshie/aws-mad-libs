// Lambda function built with esbuild
"use strict";var O=Object.create;var h=Object.defineProperty;var C=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var N=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var U=(r,e)=>{for(var o in e)h(r,o,{get:e[o],enumerable:!0})},b=(r,e,o,t)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of R(e))!B.call(r,n)&&n!==o&&h(r,n,{get:()=>e[n],enumerable:!(t=C(e,n))||t.enumerable});return r};var v=(r,e,o)=>(o=r!=null?O(N(r)):{},b(e||!r||!r.__esModule?h(o,"default",{value:r,enumerable:!0}):o,r)),_=r=>b(h({},"__esModule",{value:!0}),r);var W={};U(W,{handler:()=>D});module.exports=_(W);var x=require("@aws-sdk/client-bedrock-runtime");var I=v(require("crypto")),w=new Uint8Array(256),T=w.length;function E(){return T>w.length-16&&(I.default.randomFillSync(w),T=0),w.slice(T,T+=16)}var c=[];for(let r=0;r<256;++r)c.push((r+256).toString(16).slice(1));function S(r,e=0){return c[r[e+0]]+c[r[e+1]]+c[r[e+2]]+c[r[e+3]]+"-"+c[r[e+4]]+c[r[e+5]]+"-"+c[r[e+6]]+c[r[e+7]]+"-"+c[r[e+8]]+c[r[e+9]]+"-"+c[r[e+10]]+c[r[e+11]]+c[r[e+12]]+c[r[e+13]]+c[r[e+14]]+c[r[e+15]]}var k=v(require("crypto")),A={randomUUID:k.default.randomUUID};function M(r,e,o){if(A.randomUUID&&!e&&!r)return A.randomUUID();r=r||{};let t=r.random||(r.rng||E)();if(t[6]=t[6]&15|64,t[8]=t[8]&63|128,e){o=o||0;for(let n=0;n<16;++n)e[o+n]=t[n];return e}return S(t)}var i=M;var f=class r{constructor(){this.bedrockClient=null;this.useMock=!1,console.log("StoryGenerator constructor - using IAM role credentials"),this.bedrockClient=new x.BedrockRuntimeClient({region:process.env.AWS_REGION||"us-east-1"})}static{this.instance=null}static getInstance(){return r.instance||(r.instance=new r),r.instance}static resetInstance(){r.instance=null}async generateTemplate(e,o=4){if(console.log("\u{1F50D} generateTemplate called:",{theme:e,playerCount:o,useMock:this.useMock}),this.useMock)return console.log("\u{1F50D} Using mock because useMock = true"),this.generateMockTemplate(e,o);try{console.log("\u{1F50D} Creating prompt for Bedrock...");let t=this.createTemplatePrompt(e,o);console.log("\u{1F50D} Prompt created, calling Bedrock...");let n=await this.invokeBedrockModel(t);console.log("\u{1F50D} Bedrock response received, parsing...");let a=this.parseTemplateResponse(n,e,o);return console.log("\u{1F50D} AI template parsed successfully:",{title:a.title,theme:a.theme,paragraphCount:a.paragraphs.length}),a}catch(t){return console.error("\u274C Bedrock AI generation failed:",t),console.error("\u274C Error name:",t.name),console.error("\u274C Error message:",t.message),console.error("\u274C Error stack:",t.stack),console.log("\u{1F50D} Falling back to mock template"),this.generateMockTemplate(e,o)}}async fillTemplate(e,o){try{let t=e.paragraphs.map(l=>l.text).join(" "),n=[];console.log("\u26A1 === LAMBDA STORY GENERATOR ==="),console.log("\u26A1 Full story text:",t),console.log("\u26A1 Processing",o.length,"word submissions"),o.forEach((l,y)=>{let g=`{${this.wordTypeToPlaceholder(l.wordType)}}`;console.log(`\u26A1 Word ${y+1}/${o.length}: "${l.word}" for placeholder "${g}"`);let u=t.indexOf(g);u!==-1?(n.push({word:l.word,playerUsername:l.playerUsername,wordType:l.wordType,startIndex:u,endIndex:u+l.word.length}),t=t.replace(g,l.word),console.log(`\u26A1 Replaced "${g}" with "${l.word}"`)):console.error(`\u26A1 Could not find placeholder "${g}" in story`)});let a=e.paragraphs.map(l=>l.text),p=this.splitFilledTextIntoParagraphs(t,a),s=e.paragraphs.map((l,y)=>({id:l.id,text:p[y]||l.text,imageUrl:null,wordHighlights:[]})),d=this.createPlayerContributions(o);return{id:i(),title:e.title,theme:e.theme,paragraphs:s,playerContributions:d,createdAt:new Date}}catch(t){throw console.error("Error filling template:",t),t}}validateTemplate(e){return!e||!e.paragraphs||e.paragraphs.length===0?!1:e.paragraphs.every(o=>o.wordBlanks&&o.wordBlanks.length>0)}async invokeBedrockModel(e){if(console.log("\u{1F50D} invokeBedrockModel called"),!this.bedrockClient)throw console.error("\u274C Bedrock client not initialized"),new Error("Bedrock client not initialized");let o=process.env.BEDROCK_MODEL_ID||"amazon.nova-lite-v1:0";console.log("\u{1F50D} Using model:",o),console.log("\u{1F50D} AWS Region:",process.env.AWS_REGION||"us-east-1");let t={messages:[{role:"user",content:[{text:e}]}],inferenceConfig:{max_new_tokens:2e3,temperature:.7,top_p:.9}},n=new x.InvokeModelCommand({modelId:o,body:JSON.stringify(t),contentType:"application/json",accept:"application/json"});console.log("\u{1F50D} Sending request to Bedrock...");try{let a=await this.bedrockClient.send(n);console.log("\u{1F50D} Bedrock response received, status:",a.$metadata.httpStatusCode);let p=JSON.parse(new TextDecoder().decode(a.body));console.log("\u{1F50D} Response body keys:",Object.keys(p));let s=p.output.message.content[0].text;return console.log("\u{1F50D} Generated text length:",s.length),console.log("\u{1F50D} Generated text preview:",s.substring(0,200)+"..."),s}catch(a){throw console.error("\u274C Bedrock API call failed:",a),console.error("\u274C Bedrock error name:",a.name),console.error("\u274C Bedrock error message:",a.message),a}}createTemplatePrompt(e,o=4){return`Create a Mad Libs story template ${e?`with a ${e} theme`:"with any fun theme"} that will be fun when filled with random words. 

Requirements:
- Create a story with exactly 4 paragraphs
- Each paragraph must have exactly 4 sentences
- Include exactly 16 word blanks total (exactly 4 per paragraph, 1 per sentence)
- Use these word types: noun, verb, adjective, adverb, plural_noun, past_tense_verb, color, number, place, person
- Make the story family-friendly but funny
- Each sentence should have exactly ONE word blank
- Use placeholders like {noun}, {adjective}, etc.
- Structure: 4 paragraphs \xD7 4 sentences \xD7 1 word = 16 words total
- Include an image description for each paragraph

Format your response as JSON:
{
  "title": "Story Title",
  "theme": "${e||"adventure"}",
  "paragraphs": [
    {
      "text": "Story text with {word_type} placeholders",
      "imagePrompt": "Description for AI image generation"
    }
  ]
}

Make it creative and funny!`}parseTemplateResponse(e,o,t=4){try{let n=e.trim();n.startsWith("```json")?n=n.replace(/^```json\s*/,"").replace(/\s*```$/,""):n.startsWith("```")&&(n=n.replace(/^```\s*/,"").replace(/\s*```$/,""));let a=JSON.parse(n),p=a.paragraphs.map((d,m)=>{let l=[],y=0,g=/\{(\w+)\}/g,u;for(;(u=g.exec(d.text))!==null;){let P=this.normalizeWordType(u[1]);P&&l.push({id:i(),type:P,position:y++,assignedPlayerId:null})}return{id:i(),text:d.text,wordBlanks:l,imagePrompt:d.imagePrompt||`Scene from paragraph ${m+1}`}}),s=p.reduce((d,m)=>d+m.wordBlanks.length,0);return s<8||s>20?(console.log(`AI generated ${s} words (expected 8-20), falling back to mock template`),this.generateMockTemplate(o,t)):(console.log(`\u2705 AI template accepted with ${s} word blanks`),{id:i(),title:a.title||"AI Generated Story",paragraphs:p,totalWordBlanks:s,theme:o||a.theme||"adventure",difficulty:"medium"})}catch(n){throw console.error("Error parsing template response:",n),new Error("Failed to parse AI response")}}normalizeWordType(e){let o=e.toLowerCase().replace(/[_\s]/g,"_");return{noun:"noun",verb:"verb",adjective:"adjective",adverb:"adverb",plural_noun:"plural_noun",past_tense_verb:"past_tense_verb",color:"color",number:"number",place:"place",person:"person"}[o]||null}generateMockTemplate(e,o=4){let t=[{id:i(),text:"Once upon a time, there was a {adjective} {noun} who loved to {verb} {adverb}.",wordBlanks:[{id:i(),type:"adjective",position:0,assignedPlayerId:null},{id:i(),type:"noun",position:1,assignedPlayerId:null},{id:i(),type:"verb",position:2,assignedPlayerId:null},{id:i(),type:"adverb",position:3,assignedPlayerId:null}],imagePrompt:"A whimsical character in a fairy tale setting"},{id:i(),text:"Every day, they would visit the {color} {place} with {number} {plural_noun}.",wordBlanks:[{id:i(),type:"color",position:0,assignedPlayerId:null},{id:i(),type:"place",position:1,assignedPlayerId:null},{id:i(),type:"number",position:2,assignedPlayerId:null},{id:i(),type:"plural_noun",position:3,assignedPlayerId:null}],imagePrompt:"A colorful location with various objects"},{id:i(),text:"One day, {person} {past_tense_verb} and everything changed forever!",wordBlanks:[{id:i(),type:"person",position:0,assignedPlayerId:null},{id:i(),type:"past_tense_verb",position:1,assignedPlayerId:null}],imagePrompt:"A dramatic moment with a person taking action"}],n=t.flatMap(p=>p.wordBlanks),a=this.getThemeTitle(e||"adventure");return{id:i(),title:a,paragraphs:t,totalWordBlanks:n.length,theme:e||"adventure",difficulty:"easy"}}getThemeTitle(e){return{adventure:"The Great Adventure",school:"A Day at School",space:"Space Odyssey",food:"Culinary Adventure",animals:"Wildlife Safari",vacation:"Beach Paradise",superhero:"Hero's Journey",mystery:"The Mystery Case",pirates:"Pirate Treasure Hunt",work:"Office Chronicles",sports:"Championship Game",music:"Rock Star Dreams"}[e]||"A Magical Adventure"}wordTypeToPlaceholder(e){switch(e){case"noun":return"noun";case"verb":return"verb";case"adjective":return"adjective";case"adverb":return"adverb";case"plural_noun":return"plural_noun";case"past_tense_verb":return"past_tense_verb";case"color":return"color";case"number":return"number";case"place":return"place";case"person":return"person";default:return String(e).toLowerCase()}}splitFilledTextIntoParagraphs(e,o){let t=[],n=e;for(let a=0;a<o.length;a++){let s=o[a].split(/\s+/).length,d=n.split(/\s+/),l=d.slice(0,s).join(" ");t.push(l),n=d.slice(s).join(" ")}return t}createPlayerContributions(e){let o=new Map;return e.forEach(t=>{o.has(t.playerId)||o.set(t.playerId,{playerId:t.playerId,playerUsername:t.playerUsername,wordsContributed:[]}),o.get(t.playerId).wordsContributed.push(t.word)}),Array.from(o.values())}};var D=async r=>{console.log("Story generation request:",JSON.stringify(r,null,2));try{let e=r.body?JSON.parse(r.body):{},{theme:o,playerCount:t,exampleTemplate:n}=e;if(console.log("\u{1F50D} STORY-GENERATION: Request received:",{theme:o,playerCount:t,hasExampleTemplate:!!n}),!t||t<1||t>8)return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid player count. Must be between 1 and 8."})};let a=f.getInstance(),p,s=null;try{console.log("\u{1F50D} STORY-GENERATION: Attempting AI generation..."),p=await a.generateTemplate(o,t),console.log("\u{1F50D} STORY-GENERATION: AI generation successful:",{title:p.title})}catch(d){if(s={name:d.name,message:d.message,code:d.code||"Unknown"},console.log("\u{1F50D} STORY-GENERATION: AI generation failed:",s),console.log("\u{1F50D} STORY-GENERATION: Using exampleTemplate if available"),n)console.log("\u{1F50D} STORY-GENERATION: Using provided exampleTemplate:",{title:n.title}),p=n;else throw console.log("\u{1F50D} STORY-GENERATION: No exampleTemplate, re-throwing error"),d}return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,template:p,debug:{usedAI:!s,usedExampleTemplate:!!s&&!!n,usedFallback:!!s&&!n,aiError:s}})}}catch(e){return console.error("Error generating story template:",e),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Failed to generate story template",message:e instanceof Error?e.message:"Unknown error"})}}};0&&(module.exports={handler});
//# sourceMappingURL=story-generation.js.map
