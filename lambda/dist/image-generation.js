// Lambda function built with esbuild
"use strict";var O=Object.create;var d=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var M=Object.getPrototypeOf,R=Object.prototype.hasOwnProperty;var D=(t,e)=>()=>(t&&(e=t(t=0)),e);var A=(t,e)=>{for(var r in e)d(t,r,{get:e[r],enumerable:!0})},N=(t,e,r,a)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of $(e))!R.call(t,o)&&o!==r&&d(t,o,{get:()=>e[o],enumerable:!(a=B(e,o))||a.enumerable});return t};var P=(t,e,r)=>(r=t!=null?O(M(t)):{},N(e||!t||!t.__esModule?d(r,"default",{value:t,enumerable:!0}):r,t)),G=t=>N(d({},"__esModule",{value:!0}),t);var v={};A(v,{clearConfigCache:()=>q,getCloudFrontDistributionId:()=>W,getCloudFrontDomain:()=>F,getImagesBucketName:()=>_});async function F(){let t="cloudfront-domain";if(l.has(t))return l.get(t);try{let r=`/madlibs/${(process.env.STACK_NAME||"madlibsserverless-development").toLowerCase()}/cloudfront-domain`,a=new m.GetParameterCommand({Name:r,WithDecryption:!1}),o=await C.send(a);if(!o.Parameter?.Value)throw new Error(`CloudFront domain parameter not found: ${r}`);let s=o.Parameter.Value;return l.set(t,s),s}catch(e){throw console.error("Failed to get CloudFront domain from Parameter Store:",e),new Error("CloudFront domain configuration not available")}}async function W(){let t="cloudfront-distribution-id";if(l.has(t))return l.get(t);try{let r=`/madlibs/${(process.env.STACK_NAME||"madlibsserverless-development").toLowerCase()}/cloudfront-distribution-id`,a=new m.GetParameterCommand({Name:r,WithDecryption:!1}),o=await C.send(a);if(!o.Parameter?.Value)throw new Error(`CloudFront distribution ID parameter not found: ${r}`);let s=o.Parameter.Value;return l.set(t,s),s}catch(e){throw console.error("Failed to get CloudFront distribution ID from Parameter Store:",e),new Error("CloudFront distribution ID configuration not available")}}async function _(){let t="images-bucket-name";if(l.has(t))return l.get(t);try{let r=`/madlibs/${(process.env.STACK_NAME||"madlibsserverless-development").toLowerCase()}/images-bucket-name`,a=new m.GetParameterCommand({Name:r,WithDecryption:!1}),o=await C.send(a);if(!o.Parameter?.Value)throw new Error(`Images bucket name parameter not found: ${r}`);let s=o.Parameter.Value;return l.set(t,s),s}catch(e){console.error("Failed to get images bucket name from Parameter Store:",e);let r="madlibsserverless-development-images-553368239051";return console.log(`Using fallback bucket name: ${r}`),l.set(t,r),r}}function q(){l.clear()}var m,l,C,k=D(()=>{"use strict";m=require("@aws-sdk/client-ssm"),l=new Map,C=new m.SSMClient({region:process.env.AWS_REGION||"us-east-1"})});var K={};A(K,{handler:()=>V});module.exports=G(K);var h=require("@aws-sdk/client-bedrock-runtime"),f=require("@aws-sdk/client-s3");var x=P(require("crypto")),u=new Uint8Array(256),g=u.length;function b(){return g>u.length-16&&(x.default.randomFillSync(u),g=0),u.slice(g,g+=16)}var i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));function E(t,e=0){return i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]}var T=P(require("crypto")),I={randomUUID:T.default.randomUUID};function U(t,e,r){if(I.randomUUID&&!e&&!t)return I.randomUUID();t=t||{};let a=t.random||(t.rng||b)();if(a[6]=a[6]&15|64,a[8]=a[8]&63|128,e){r=r||0;for(let o=0;o<16;++o)e[r+o]=a[o];return e}return E(a)}var y=U;var p=class t{constructor(){this.bedrockClient=null;this.s3Client=null;this.bucketName=null;console.log("ImageGenerator constructor - using AWS Bedrock for image generation with IAM role");let e=process.env.AWS_REGION||"us-east-1";this.bedrockClient=new h.BedrockRuntimeClient({region:e}),this.s3Client=new f.S3Client({region:e})}static{this.instance=null}static getInstance(){return t.instance||(t.instance=new t),t.instance}static resetInstance(){t.instance=null}async getBucketName(){if(this.bucketName)return this.bucketName;try{let{getImagesBucketName:e}=await Promise.resolve().then(()=>(k(),v));return this.bucketName=await e(),this.bucketName}catch(e){return console.error("Failed to get bucket name from Parameter Store:",e),this.bucketName=process.env.IMAGES_BUCKET_NAME||process.env.S3_BUCKET_NAME||"madlibsserverless-development-images-553368239051",this.bucketName}}async generateImage(e,r={style:"cartoon",colorScheme:"vibrant"},a){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");return this.generateImageWithRetry(e,r,0,a)}async generateImageWithRetry(e,r,a,o){let n=[0,15e3,3e4,6e4,12e4];try{a>0&&(console.log(`\u23F3 Retrying image generation (attempt ${a+1}/4) after ${n[a]/1e3}s delay`),await this.sleep(n[a])),console.log("\u{1F3A8} Generating image with Bedrock Nova:",e),console.log("\u{1F5BC}\uFE0F Reference image URL:",o||"None (first image)");let c=this.enhancePrompt(e,r),w=await this.invokeBedrockImageModel(c,o),S=await this.uploadToS3(w,e);return console.log("\u2705 Image generated successfully:",S),{id:y(),url:S,prompt:c,width:512,height:512,createdAt:new Date}}catch(c){if(console.error(`\u274C Error generating image (attempt ${a+1}):`,c),c.name==="ThrottlingException"&&a<3)return console.log(`\u{1F504} Throttling detected, will retry in ${n[a+1]/1e3} seconds...`),this.generateImageWithRetry(e,r,a+1,o);throw console.error("\u{1F6A8} All retry attempts failed or non-throttling error"),console.error("Error details:",{message:c.message,name:c.name,code:c.code||"Unknown"}),c}}sleep(e){return new Promise(r=>setTimeout(r,e))}async generateBatch(e,r={style:"cartoon",colorScheme:"vibrant"}){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");let a=[];for(let o=0;o<e.length;o++){let s=e[o];try{console.log(`\u{1F3A8} Generating batch image ${o+1}/${e.length}`);let n=await this.generateImage(s,r);a.push(n),o<e.length-1&&(console.log("\u23F3 Waiting 5 seconds before next batch image..."),await this.sleep(5e3))}catch(n){throw console.error(`Error generating batch image for prompt "${s}":`,n),n}}return a}async optimizeForVideo(e){return{...e,width:1024,height:576}}async invokeBedrockImageModel(e,r){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let a=process.env.BEDROCK_IMAGE_MODEL_ID||"amazon.nova-canvas-v1:0",o;if(r){console.log("\u{1F504} Using IMAGE_VARIATION mode for character consistency");let n=await this.downloadImageAsBase64(r);o={taskType:"IMAGE_VARIATION",imageVariationParams:{text:e+". Maintain character consistency and appearance from reference image.",images:[n],similarityStrength:.6,negativeText:"different character, inconsistent appearance, blurry, low quality, distorted, text, watermark, signature"},imageGenerationConfig:{numberOfImages:1,height:512,width:512,cfgScale:8}}}else console.log("\u{1F195} Using TEXT_IMAGE mode for first image"),o={taskType:"TEXT_IMAGE",textToImageParams:{text:e+". Create detailed, memorable characters for consistency in future images.",negativeText:"blurry, low quality, distorted, text, watermark, signature"},imageGenerationConfig:{numberOfImages:1,height:512,width:512,cfgScale:8,seed:Math.floor(Math.random()*1e6)}};let s=new h.InvokeModelCommand({modelId:a,body:JSON.stringify(o),contentType:"application/json",accept:"application/json"});try{console.log("\u{1F4E1} Calling Bedrock Nova API with payload:",JSON.stringify(o,null,2));let n=await this.bedrockClient.send(s),c=JSON.parse(new TextDecoder().decode(n.body));if(console.log("\u{1F4E5} Bedrock response received:",{hasImages:!!c.images,imageCount:c.images?.length||0}),!c.images||c.images.length===0)throw new Error("No image generated by Bedrock Nova");let w=c.images[0];return new Uint8Array(Buffer.from(w,"base64"))}catch(n){throw console.error("\u{1F6A8} Bedrock API call failed:",n),n.name==="ValidationException"?console.error("\u{1F4A1} This is likely a payload format issue"):n.name==="ThrottlingException"?console.error("\u{1F6A6} Rate limit exceeded - will retry with backoff"):n.name==="ServiceQuotaExceededException"&&console.error("\u{1F4CA} Service quota exceeded - may need to request limit increase"),n}}async uploadToS3(e,r){if(!this.s3Client)throw new Error("S3 client not initialized");let a=await this.getBucketName(),o=`images/${y()}.png`,s=new f.PutObjectCommand({Bucket:a,Key:o,Body:e,ContentType:"image/png",Metadata:{prompt:r.substring(0,1e3),generatedAt:new Date().toISOString()}});await this.s3Client.send(s);let{getCloudFrontDomain:n}=await Promise.resolve().then(()=>(k(),v));return`https://${await n()}/${o}`}async downloadImageAsBase64(e){try{console.log("\u{1F4E5} Downloading reference image:",e);let r=await fetch(e);if(!r.ok)throw new Error(`Failed to download reference image: ${r.status}`);let a=await r.arrayBuffer(),o=Buffer.from(a).toString("base64");return console.log("\u2705 Reference image converted to base64, size:",o.length),o}catch(r){throw console.error("\u274C Failed to download reference image:",r),new Error(`Could not download reference image: ${r}`)}}enhancePrompt(e,r){let a={cartoon:"modern Hanna-Barbera cartoon style, 2020s animation, clean vector art, bold outlines, flat colors, contemporary cartoon design, animated series style",realistic:"photorealistic, detailed, high quality",artistic:"artistic, painterly, creative, stylized",comic:"comic book style, bold lines, dynamic"},o={vibrant:"vibrant saturated colors, bright cheerful palette, bold color choices",pastel:"soft pastel colors, gentle tones, muted palette",monochrome:"black and white, high contrast, grayscale"};return`${e}, ${a[r.style]}, ${o[r.colorScheme]}, family-friendly, safe for work, no text, high quality, smooth gradients, modern cartoon illustration`}};var V=async t=>{console.log("Image generation request:",JSON.stringify(t,null,2));try{let e=t.body?JSON.parse(t.body):{},{prompt:r,style:a="photographic",referenceImageUrl:o}=e;if(!r||typeof r!="string")return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Prompt is required."})};let n=await p.getInstance().generateImage(r,a,o);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,result:n})}}catch(e){console.error("Error generating image:",e);let r=process.env.DEBUG_ERRORS==="true",a={error:"Failed to generate image",message:e instanceof Error?e.message:"Unknown error"};return r&&(a.debug={name:e.name,code:e.code,statusCode:e.$metadata?.httpStatusCode,requestId:e.$metadata?.requestId,retryable:e.$retryable,fault:e.$fault,stack:e instanceof Error?e.stack:void 0,fullError:JSON.stringify(e,Object.getOwnPropertyNames(e),2)},e.$response&&(a.debug.httpResponse={statusCode:e.$response.statusCode,statusMessage:e.$response.statusMessage,headers:e.$response.headers})),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify(a)}}};0&&(module.exports={handler});
//# sourceMappingURL=image-generation.js.map
