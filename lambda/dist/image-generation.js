// Lambda function built with esbuild
"use strict";var O=Object.create;var d=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var M=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var D=(t,e)=>()=>(t&&(e=t(t=0)),e);var v=(t,e)=>{for(var r in e)d(t,r,{get:e[r],enumerable:!0})},S=(t,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of M(e))!$.call(t,n)&&n!==r&&d(t,n,{get:()=>e[n],enumerable:!(o=B(e,n))||o.enumerable});return t};var A=(t,e,r)=>(r=t!=null?O(R(t)):{},S(e||!t||!t.__esModule?d(r,"default",{value:t,enumerable:!0}):r,t)),G=t=>S(d({},"__esModule",{value:!0}),t);var T={};v(T,{clearConfigCache:()=>q,getCloudFrontDistributionId:()=>W,getCloudFrontDomain:()=>F});async function F(){let t="cloudfront-domain";if(l.has(t))return l.get(t);try{let r=`/madlibs/${(process.env.STACK_NAME||"madlibsserverless-development").toLowerCase()}/cloudfront-domain`,o=new m.GetParameterCommand({Name:r,WithDecryption:!1}),n=await E.send(o);if(!n.Parameter?.Value)throw new Error(`CloudFront domain parameter not found: ${r}`);let c=n.Parameter.Value;return l.set(t,c),c}catch(e){throw console.error("Failed to get CloudFront domain from Parameter Store:",e),new Error("CloudFront domain configuration not available")}}async function W(){let t="cloudfront-distribution-id";if(l.has(t))return l.get(t);try{let r=`/madlibs/${(process.env.STACK_NAME||"madlibsserverless-development").toLowerCase()}/cloudfront-distribution-id`,o=new m.GetParameterCommand({Name:r,WithDecryption:!1}),n=await E.send(o);if(!n.Parameter?.Value)throw new Error(`CloudFront distribution ID parameter not found: ${r}`);let c=n.Parameter.Value;return l.set(t,c),c}catch(e){throw console.error("Failed to get CloudFront distribution ID from Parameter Store:",e),new Error("CloudFront distribution ID configuration not available")}}function q(){l.clear()}var m,l,E,N=D(()=>{"use strict";m=require("@aws-sdk/client-ssm"),l=new Map,E=new m.SSMClient({region:process.env.AWS_REGION||"us-east-1"})});var J={};v(J,{handler:()=>_});module.exports=G(J);var h=require("@aws-sdk/client-bedrock-runtime"),f=require("@aws-sdk/client-s3");var x=A(require("crypto")),u=new Uint8Array(256),g=u.length;function I(){return g>u.length-16&&(x.default.randomFillSync(u),g=0),u.slice(g,g+=16)}var i=[];for(let t=0;t<256;++t)i.push((t+256).toString(16).slice(1));function k(t,e=0){return i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]}var P=A(require("crypto")),b={randomUUID:P.default.randomUUID};function U(t,e,r){if(b.randomUUID&&!e&&!t)return b.randomUUID();t=t||{};let o=t.random||(t.rng||I)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,e){r=r||0;for(let n=0;n<16;++n)e[r+n]=o[n];return e}return k(o)}var y=U;var p=class t{constructor(){this.bedrockClient=null;this.s3Client=null;this.bucketName=process.env.IMAGES_BUCKET_NAME||process.env.S3_BUCKET_NAME||"ai-mad-libs-media",console.log("ImageGenerator constructor - using AWS Bedrock for image generation with IAM role");let e=process.env.AWS_REGION||"us-east-1";this.bedrockClient=new h.BedrockRuntimeClient({region:e}),this.s3Client=new f.S3Client({region:e})}static{this.instance=null}static getInstance(){return t.instance||(t.instance=new t),t.instance}static resetInstance(){t.instance=null}async generateImage(e,r={style:"cartoon",colorScheme:"vibrant"},o){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");return this.generateImageWithRetry(e,r,0,o)}async generateImageWithRetry(e,r,o,n){let a=[0,15e3,3e4,6e4,12e4];try{o>0&&(console.log(`\u23F3 Retrying image generation (attempt ${o+1}/4) after ${a[o]/1e3}s delay`),await this.sleep(a[o])),console.log("\u{1F3A8} Generating image with Bedrock Nova:",e),console.log("\u{1F5BC}\uFE0F Reference image URL:",n||"None (first image)");let s=this.enhancePrompt(e,r),w=await this.invokeBedrockImageModel(s,n),C=await this.uploadToS3(w,e);return console.log("\u2705 Image generated successfully:",C),{id:y(),url:C,prompt:s,width:512,height:512,createdAt:new Date}}catch(s){if(console.error(`\u274C Error generating image (attempt ${o+1}):`,s),s.name==="ThrottlingException"&&o<3)return console.log(`\u{1F504} Throttling detected, will retry in ${a[o+1]/1e3} seconds...`),this.generateImageWithRetry(e,r,o+1,n);throw console.error("\u{1F6A8} All retry attempts failed or non-throttling error"),console.error("Error details:",{message:s.message,name:s.name,code:s.code||"Unknown"}),s}}sleep(e){return new Promise(r=>setTimeout(r,e))}async generateBatch(e,r={style:"cartoon",colorScheme:"vibrant"}){if(!this.bedrockClient||!this.s3Client)throw new Error("AWS Bedrock and S3 clients are not initialized. Please check your AWS credentials.");let o=[];for(let n=0;n<e.length;n++){let c=e[n];try{console.log(`\u{1F3A8} Generating batch image ${n+1}/${e.length}`);let a=await this.generateImage(c,r);o.push(a),n<e.length-1&&(console.log("\u23F3 Waiting 5 seconds before next batch image..."),await this.sleep(5e3))}catch(a){throw console.error(`Error generating batch image for prompt "${c}":`,a),a}}return o}async optimizeForVideo(e){return{...e,width:1024,height:576}}async invokeBedrockImageModel(e,r){if(!this.bedrockClient)throw new Error("Bedrock client not initialized");let o=process.env.BEDROCK_IMAGE_MODEL_ID||"amazon.nova-canvas-v1:0",n;if(r){console.log("\u{1F504} Using IMAGE_VARIATION mode for character consistency");let a=await this.downloadImageAsBase64(r);n={taskType:"IMAGE_VARIATION",imageVariationParams:{text:e+". Maintain character consistency and appearance from reference image.",images:[a],similarityStrength:.6,negativeText:"different character, inconsistent appearance, blurry, low quality, distorted, text, watermark, signature"},imageGenerationConfig:{numberOfImages:1,height:512,width:512,cfgScale:8}}}else console.log("\u{1F195} Using TEXT_IMAGE mode for first image"),n={taskType:"TEXT_IMAGE",textToImageParams:{text:e+". Create detailed, memorable characters for consistency in future images.",negativeText:"blurry, low quality, distorted, text, watermark, signature"},imageGenerationConfig:{numberOfImages:1,height:512,width:512,cfgScale:8,seed:Math.floor(Math.random()*1e6)}};let c=new h.InvokeModelCommand({modelId:o,body:JSON.stringify(n),contentType:"application/json",accept:"application/json"});try{console.log("\u{1F4E1} Calling Bedrock Nova API with payload:",JSON.stringify(n,null,2));let a=await this.bedrockClient.send(c),s=JSON.parse(new TextDecoder().decode(a.body));if(console.log("\u{1F4E5} Bedrock response received:",{hasImages:!!s.images,imageCount:s.images?.length||0}),!s.images||s.images.length===0)throw new Error("No image generated by Bedrock Nova");let w=s.images[0];return new Uint8Array(Buffer.from(w,"base64"))}catch(a){throw console.error("\u{1F6A8} Bedrock API call failed:",a),a.name==="ValidationException"?console.error("\u{1F4A1} This is likely a payload format issue"):a.name==="ThrottlingException"?console.error("\u{1F6A6} Rate limit exceeded - will retry with backoff"):a.name==="ServiceQuotaExceededException"&&console.error("\u{1F4CA} Service quota exceeded - may need to request limit increase"),a}}async uploadToS3(e,r){if(!this.s3Client)throw new Error("S3 client not initialized");let o=`images/${y()}.png`,n=new f.PutObjectCommand({Bucket:this.bucketName,Key:o,Body:e,ContentType:"image/png",Metadata:{prompt:r.substring(0,1e3),generatedAt:new Date().toISOString()}});await this.s3Client.send(n);let{getCloudFrontDomain:c}=await Promise.resolve().then(()=>(N(),T));return`https://${await c()}/${o}`}async downloadImageAsBase64(e){try{console.log("\u{1F4E5} Downloading reference image:",e);let r=await fetch(e);if(!r.ok)throw new Error(`Failed to download reference image: ${r.status}`);let o=await r.arrayBuffer(),n=Buffer.from(o).toString("base64");return console.log("\u2705 Reference image converted to base64, size:",n.length),n}catch(r){throw console.error("\u274C Failed to download reference image:",r),new Error(`Could not download reference image: ${r}`)}}enhancePrompt(e,r){let o={cartoon:"modern Hanna-Barbera cartoon style, 2020s animation, clean vector art, bold outlines, flat colors, contemporary cartoon design, animated series style",realistic:"photorealistic, detailed, high quality",artistic:"artistic, painterly, creative, stylized",comic:"comic book style, bold lines, dynamic"},n={vibrant:"vibrant saturated colors, bright cheerful palette, bold color choices",pastel:"soft pastel colors, gentle tones, muted palette",monochrome:"black and white, high contrast, grayscale"};return`${e}, ${o[r.style]}, ${n[r.colorScheme]}, family-friendly, safe for work, no text, high quality, smooth gradients, modern cartoon illustration`}};var _=async t=>{console.log("Image generation request:",JSON.stringify(t,null,2));try{let e=t.body?JSON.parse(t.body):{},{prompt:r,style:o="photographic",referenceImageUrl:n}=e;if(!r||typeof r!="string")return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Prompt is required."})};let a=await p.getInstance().generateImage(r,o,n);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,result:a})}}catch(e){console.error("Error generating image:",e);let r=process.env.DEBUG_ERRORS==="true",o={error:"Failed to generate image",message:e instanceof Error?e.message:"Unknown error"};return r&&(o.debug={name:e.name,code:e.code,statusCode:e.$metadata?.httpStatusCode,requestId:e.$metadata?.requestId,retryable:e.$retryable,fault:e.$fault,stack:e instanceof Error?e.stack:void 0,fullError:JSON.stringify(e,Object.getOwnPropertyNames(e),2)},e.$response&&(o.debug.httpResponse={statusCode:e.$response.statusCode,statusMessage:e.$response.statusMessage,headers:e.$response.headers})),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify(o)}}};0&&(module.exports={handler});
//# sourceMappingURL=image-generation.js.map
