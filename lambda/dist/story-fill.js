// Lambda function built with esbuild
"use strict";var C=Object.create;var h=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var R=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var _=(t,e)=>{for(var r in e)h(t,r,{get:e[r],enumerable:!0})},b=(t,e,r,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of R(e))!N.call(t,n)&&n!==r&&h(t,n,{get:()=>e[n],enumerable:!(o=O(e,n))||o.enumerable});return t};var S=(t,e,r)=>(r=t!=null?C(B(t)):{},b(e||!t||!t.__esModule?h(r,"default",{value:t,enumerable:!0}):r,t)),U=t=>b(h({},"__esModule",{value:!0}),t);var W={};_(W,{handler:()=>D});module.exports=U(W);var x=require("@aws-sdk/client-bedrock-runtime");var k=S(require("crypto")),w=new Uint8Array(256),f=w.length;function P(){return f>w.length-16&&(k.default.randomFillSync(w),f=0),w.slice(f,f+=16)}var l=[];for(let t=0;t<256;++t)l.push((t+256).toString(16).slice(1));function E(t,e=0){return l[t[e+0]]+l[t[e+1]]+l[t[e+2]]+l[t[e+3]]+"-"+l[t[e+4]]+l[t[e+5]]+"-"+l[t[e+6]]+l[t[e+7]]+"-"+l[t[e+8]]+l[t[e+9]]+"-"+l[t[e+10]]+l[t[e+11]]+l[t[e+12]]+l[t[e+13]]+l[t[e+14]]+l[t[e+15]]}var I=S(require("crypto")),v={randomUUID:I.default.randomUUID};function M(t,e,r){if(v.randomUUID&&!e&&!t)return v.randomUUID();t=t||{};let o=t.random||(t.rng||P)();if(o[6]=o[6]&15|64,o[8]=o[8]&63|128,e){r=r||0;for(let n=0;n<16;++n)e[r+n]=o[n];return e}return E(o)}var i=M;var T=class t{constructor(){this.bedrockClient=null;this.useMock=!1,console.log("StoryGenerator constructor - using IAM role credentials"),this.bedrockClient=new x.BedrockRuntimeClient({region:process.env.AWS_REGION||"us-east-1"})}static{this.instance=null}static getInstance(){return t.instance||(t.instance=new t),t.instance}static resetInstance(){t.instance=null}async generateTemplate(e,r=4){if(console.log("\u{1F50D} generateTemplate called:",{theme:e,playerCount:r,useMock:this.useMock}),this.useMock)return console.log("\u{1F50D} Using mock because useMock = true"),this.generateMockTemplate(e,r);try{console.log("\u{1F50D} Creating prompt for Bedrock...");let o=this.createTemplatePrompt(e,r);console.log("\u{1F50D} Prompt created, calling Bedrock...");let n=await this.invokeBedrockModel(o);console.log("\u{1F50D} Bedrock response received, parsing...");let a=this.parseTemplateResponse(n,e,r);return console.log("\u{1F50D} AI template parsed successfully:",{title:a.title,theme:a.theme,paragraphCount:a.paragraphs.length}),a}catch(o){return console.error("\u274C Bedrock AI generation failed:",o),console.error("\u274C Error name:",o.name),console.error("\u274C Error message:",o.message),console.error("\u274C Error stack:",o.stack),console.log("\u{1F50D} Falling back to mock template"),this.generateMockTemplate(e,r)}}async fillTemplate(e,r){try{let o=e.paragraphs.map(s=>s.text).join(" "),n=[];console.log("\u26A1 === LAMBDA STORY GENERATOR ==="),console.log("\u26A1 Full story text:",o),console.log("\u26A1 Processing",r.length,"word submissions"),r.forEach((s,y)=>{let g=`{${this.wordTypeToPlaceholder(s.wordType)}}`;console.log(`\u26A1 Word ${y+1}/${r.length}: "${s.word}" for placeholder "${g}"`);let u=o.indexOf(g);u!==-1?(n.push({word:s.word,playerUsername:s.playerUsername,wordType:s.wordType,startIndex:u,endIndex:u+s.word.length}),o=o.replace(g,s.word),console.log(`\u26A1 Replaced "${g}" with "${s.word}"`)):console.error(`\u26A1 Could not find placeholder "${g}" in story`)});let a=e.paragraphs.map(s=>s.text),p=this.splitFilledTextIntoParagraphs(o,a),c=e.paragraphs.map((s,y)=>({id:s.id,text:p[y]||s.text,imageUrl:null,wordHighlights:[]})),d=this.createPlayerContributions(r);return{id:i(),title:e.title,theme:e.theme,paragraphs:c,playerContributions:d,createdAt:new Date}}catch(o){throw console.error("Error filling template:",o),o}}validateTemplate(e){return!e||!e.paragraphs||e.paragraphs.length===0?!1:e.paragraphs.every(r=>r.wordBlanks&&r.wordBlanks.length>0)}async invokeBedrockModel(e){if(console.log("\u{1F50D} invokeBedrockModel called"),!this.bedrockClient)throw console.error("\u274C Bedrock client not initialized"),new Error("Bedrock client not initialized");let r=process.env.BEDROCK_MODEL_ID||"amazon.nova-lite-v1:0";console.log("\u{1F50D} Using model:",r),console.log("\u{1F50D} AWS Region:",process.env.AWS_REGION||"us-east-1");let o={messages:[{role:"user",content:[{text:e}]}],inferenceConfig:{max_new_tokens:2e3,temperature:.7,top_p:.9}},n=new x.InvokeModelCommand({modelId:r,body:JSON.stringify(o),contentType:"application/json",accept:"application/json"});console.log("\u{1F50D} Sending request to Bedrock...");try{let a=await this.bedrockClient.send(n);console.log("\u{1F50D} Bedrock response received, status:",a.$metadata.httpStatusCode);let p=JSON.parse(new TextDecoder().decode(a.body));console.log("\u{1F50D} Response body keys:",Object.keys(p));let c=p.output.message.content[0].text;return console.log("\u{1F50D} Generated text length:",c.length),console.log("\u{1F50D} Generated text preview:",c.substring(0,200)+"..."),c}catch(a){throw console.error("\u274C Bedrock API call failed:",a),console.error("\u274C Bedrock error name:",a.name),console.error("\u274C Bedrock error message:",a.message),a}}createTemplatePrompt(e,r=4){return`Create a Mad Libs story template ${e?`with a ${e} theme`:"with any fun theme"} that will be fun when filled with random words. 

Requirements:
- Create a story with exactly 4 paragraphs
- Each paragraph must have exactly 4 sentences
- Include exactly 16 word blanks total (exactly 4 per paragraph, 1 per sentence)
- Use these word types: noun, verb, adjective, adverb, plural_noun, past_tense_verb, color, number, place, person
- Make the story family-friendly but funny
- Each sentence should have exactly ONE word blank
- Use placeholders like {noun}, {adjective}, etc.
- Structure: 4 paragraphs \xD7 4 sentences \xD7 1 word = 16 words total
- Include an image description for each paragraph

Format your response as JSON:
{
  "title": "Story Title",
  "theme": "${e||"adventure"}",
  "paragraphs": [
    {
      "text": "Story text with {word_type} placeholders",
      "imagePrompt": "Description for AI image generation"
    }
  ]
}

Make it creative and funny!`}parseTemplateResponse(e,r,o=4){try{let n=e.trim();n.startsWith("```json")?n=n.replace(/^```json\s*/,"").replace(/\s*```$/,""):n.startsWith("```")&&(n=n.replace(/^```\s*/,"").replace(/\s*```$/,""));let a=JSON.parse(n),p=a.paragraphs.map((d,m)=>{let s=[],y=0,g=/\{(\w+)\}/g,u;for(;(u=g.exec(d.text))!==null;){let A=this.normalizeWordType(u[1]);A&&s.push({id:i(),type:A,position:y++,assignedPlayerId:null})}return{id:i(),text:d.text,wordBlanks:s,imagePrompt:d.imagePrompt||`Scene from paragraph ${m+1}`}}),c=p.reduce((d,m)=>d+m.wordBlanks.length,0);return c<8||c>20?(console.log(`AI generated ${c} words (expected 8-20), falling back to mock template`),this.generateMockTemplate(r,o)):(console.log(`\u2705 AI template accepted with ${c} word blanks`),{id:i(),title:a.title||"AI Generated Story",paragraphs:p,totalWordBlanks:c,theme:r||a.theme||"adventure",difficulty:"medium"})}catch(n){throw console.error("Error parsing template response:",n),new Error("Failed to parse AI response")}}normalizeWordType(e){let r=e.toLowerCase().replace(/[_\s]/g,"_");return{noun:"noun",verb:"verb",adjective:"adjective",adverb:"adverb",plural_noun:"plural_noun",past_tense_verb:"past_tense_verb",color:"color",number:"number",place:"place",person:"person"}[r]||null}generateMockTemplate(e,r=4){let o=[{id:i(),text:"Once upon a time, there was a {adjective} {noun} who loved to {verb} {adverb}.",wordBlanks:[{id:i(),type:"adjective",position:0,assignedPlayerId:null},{id:i(),type:"noun",position:1,assignedPlayerId:null},{id:i(),type:"verb",position:2,assignedPlayerId:null},{id:i(),type:"adverb",position:3,assignedPlayerId:null}],imagePrompt:"A whimsical character in a fairy tale setting"},{id:i(),text:"Every day, they would visit the {color} {place} with {number} {plural_noun}.",wordBlanks:[{id:i(),type:"color",position:0,assignedPlayerId:null},{id:i(),type:"place",position:1,assignedPlayerId:null},{id:i(),type:"number",position:2,assignedPlayerId:null},{id:i(),type:"plural_noun",position:3,assignedPlayerId:null}],imagePrompt:"A colorful location with various objects"},{id:i(),text:"One day, {person} {past_tense_verb} and everything changed forever!",wordBlanks:[{id:i(),type:"person",position:0,assignedPlayerId:null},{id:i(),type:"past_tense_verb",position:1,assignedPlayerId:null}],imagePrompt:"A dramatic moment with a person taking action"}],n=o.flatMap(p=>p.wordBlanks),a=this.getThemeTitle(e||"adventure");return{id:i(),title:a,paragraphs:o,totalWordBlanks:n.length,theme:e||"adventure",difficulty:"easy"}}getThemeTitle(e){return{adventure:"The Great Adventure",school:"A Day at School",space:"Space Odyssey",food:"Culinary Adventure",animals:"Wildlife Safari",vacation:"Beach Paradise",superhero:"Hero's Journey",mystery:"The Mystery Case",pirates:"Pirate Treasure Hunt",work:"Office Chronicles",sports:"Championship Game",music:"Rock Star Dreams"}[e]||"A Magical Adventure"}wordTypeToPlaceholder(e){switch(e){case"noun":return"noun";case"verb":return"verb";case"adjective":return"adjective";case"adverb":return"adverb";case"plural_noun":return"plural_noun";case"past_tense_verb":return"past_tense_verb";case"color":return"color";case"number":return"number";case"place":return"place";case"person":return"person";default:return String(e).toLowerCase()}}splitFilledTextIntoParagraphs(e,r){let o=[],n=e;for(let a=0;a<r.length;a++){let c=r[a].split(/\s+/).length,d=n.split(/\s+/),s=d.slice(0,c).join(" ");o.push(s),n=d.slice(c).join(" ")}return o}createPlayerContributions(e){let r=new Map;return e.forEach(o=>{r.has(o.playerId)||r.set(o.playerId,{playerId:o.playerId,playerUsername:o.playerUsername,wordsContributed:[]}),r.get(o.playerId).wordsContributed.push(o.word)}),Array.from(r.values())}};var D=async t=>{console.log("Story fill request:",JSON.stringify(t,null,2));try{let e=t.body?JSON.parse(t.body):{},{template:r,words:o}=e;if(!r||!o||!Array.isArray(o))return{statusCode:400,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Invalid request. Template and words array are required."})};console.log("\u{1F50D} STORY-FILL: Template received:",{id:r.id,title:r.title,theme:r.theme,paragraphCount:r.paragraphs?.length,totalWordBlanks:r.totalWordBlanks});let a=await T.getInstance().fillTemplate(r,o);return{statusCode:200,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({success:!0,story:a})}}catch(e){return console.error("Error filling story template:",e),{statusCode:500,headers:{"Content-Type":"application/json","Access-Control-Allow-Origin":"*","Access-Control-Allow-Headers":"Content-Type","Access-Control-Allow-Methods":"POST, OPTIONS"},body:JSON.stringify({error:"Failed to fill story template",message:e instanceof Error?e.message:"Unknown error"})}}};0&&(module.exports={handler});
//# sourceMappingURL=story-fill.js.map
